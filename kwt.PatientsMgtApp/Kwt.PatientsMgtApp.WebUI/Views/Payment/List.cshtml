@using Kwt.PatientsMgtApp.WebUI.Infrastructure
@*@using PagedList.Mvc;
    @model PagedList.IPagedList<Kwt.PatientsMgtApp.Core.Models.PaymentModel>*@

@model List<Kwt.PatientsMgtApp.Core.Models.PaymentModel>

@{
    ViewBag.Title = "Payment List";
}
@{
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
    serializer.MaxJsonLength = Int32.MaxValue;
    var jsonModel = serializer.Serialize(Model);
}
@if (User.IsInAnyRoles(CrudRoles.PaymentCreateRoles))
{
    <div class="pt-3 pb-3">
        <a href="@Url.Action("Create", "Payment")" class="k-button"><i class="fa fa-plus" style="color: yellowgreen"></i> New Payment</a>
        <a href="javascript:window.print()" class="k-button"><i class="fa fa-print" style="color: blueviolet"></i> Print This Page</a>
    </div>
    @* new June 29, 2019 *@
    <div class="pt-4">
        <div style="display: inline">
            <input id="numberOfDays" class="k-textbox" placeholder="Enter Number Of Days" />

        </div>
        <a href="javascript:showNextPatientPayments()" class="k-button" data-toggle="tooltip" title="Enter Number Of Days first!"><i class="fa fa-warning" style="color: orangered"></i> Payment Alert</a>

    </div>
    @* new February 28, 2019 *@
    <div class="pt-4">
        <div style="display: inline">
            <input id="paymentDt1" class="k-textbox" placeholder="MM/dd/YYYY" />

        </div>

        <div style="display: inline">

            <input id="paymentDt2" class="k-textbox" placeholder="MM/dd/YYYY" />

        </div>
        <a href="javascript:showTodayPayments()" class="k-button">Get Payments</a>


    </div>
}


<div class="modal fade bd-example-modal-lg" id="todayPaymentList" tabindex="-1" role="dialog" aria-labelledby="deleteLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="deleteLabel">
                    <i id="payment1"></i> <i id="payment2"></i> Payments
                </h4>
            </div>
            <div class="modal-body">
                <div id="paymentGrid"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade bd-example-modal-lg" id="patientDueForNextPayment" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="deleteModalLabel"></h4>
            </div>
            <div class="modal-body">
                <div id="patientDueForNextPaymentGrid"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@* new February 28, 2019 *@
<div class="pb-5 pt-5">
    @*@if (Model.Any())
        {*@
    @if (!User.IsInAnyRoles(CrudRoles.PaymentApprovalRoles))
    {
        <div class="pb-3">
            @{Html.RenderPartial("_PaymentSearchForm");}
        </div>
                }

    <div class="loader"></div>


    @if (User.IsInAnyRoles(CrudRoles.PaymentApprovalRoles))
    {

        @* Uncomment the next lines once the invoice is complete *@
        <div class="row pb-3">
            <div class="btn-group btn-group-toggle col-md-8" data-toggle="buttons">
                <label class="btn btn-secondary active">
                    <input type="radio" name="paymentApprovement" id="pending" autocomplete="off" value="2"> Pending Approval
                </label>
                <label class="btn btn-secondary">
                    <input type="radio" name="paymentApprovement" id="approved" autocomplete="off" checked value="1"> Approved Payment
                </label>
            </div>
        </div>
        <div class="row pb-3">
            <div class="col-md-4">
                <input class=k-textbox type=text id="txtSearchString" style="width: 100%" placeholder="Voucher# Or PatientCID..." />
            </div>
            <div class="col-md-8">
                <button type="submit" class="k-button" id="btnSearch"><i class="fa fa-search" style="color: yellowgreen"></i> Search</button>
                <button type="submit" class="k-button k-notification-button" id="btnClear"><i class="fa fa-times" style="color: lightblue"></i> Clear</button>
            </div>

        </div>


    }

    <div id="content" style="visibility: hidden;">
        <div id="paymentList"></div>

    </div>
    @*}*@
    @*else
        {
            <div class="alert-success">
                No Payments to show in our records hahaha!
            </div>
        }*@

</div>



@section DeleteConfirm{

    @{ Html.RenderPartial("_DeleteConfirmationModel"); }
}

@section Scripts {

    @{ Html.RenderPartial("_DeleteConfirmationjs"); }
    <script type="text/javascript">
        $("#clear").click(function (e) {
            $("#searchPayment").val("");
            $("#clearSearch").val(true);
        });
    </script>
    <script src="https://kendo.cdn.telerik.com/2018.2.516/js/pako_deflate.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2017.1.118/js/jszip.min.js"></script><!-- required to export grid to excel-->
    <script type="text/javascript">

        $('document').ready(function () {
            $("#content").css("visibility", "visible");
            //
            $('#paymentDt1, #paymentDt2').datepicker();

            //
            var data = @Html.Raw(jsonModel);
            console.log(data);
            var isAdmin =   @Html.Raw(Json.Encode(User.IsInAnyRoles(CrudRoles.AdminCrudRoles)));
            var isAccountant =   @Html.Raw(Json.Encode(User.IsInAnyRoles(CrudRoles.PaymentDeleteRoles)));
            var isAuditor =  @Html.Raw(Json.Encode(User.IsInAnyRoles(CrudRoles.PaymentApprovalRoles)));
            function getTemplate(paymentId) {
                if (isAdmin) {
                    return '<div style="text-align: center;"><a href="javascript:confirmDelete('+paymentId+','+'\'paymentId\''+')" id='+paymentId+'> <i class="fa fa-trash-o"></i></a></div>';
                }
                return '';
            }
            function getVoidTemplate(paymentId) {
                if (isAccountant) {
                    return '<div style="text-align: center;"><a href="javascript:confirmDelete('+paymentId+','+'\'paymentId\''+')" id='+paymentId+'> <i class="fa fa-times fa-2x" style="color: lightcoral"></i></a></div>';
                }
                return '';
            }

            function getRejectedTemplate(isRejected) {
                // console.log(JSON.parse(isRejected));

                if (isRejected==='null') {
                    return '<i class="fa fa-ban fa-2x" style="color:red;"></i> '+isRejected+' ';
                    //return '<a href="javascript:confirmDelete('+paymentId+','+'\'paymentId\''+')" id='+paymentId+'> <i class="fa fa-times fa-2x" style="color: lightcoral"></i></a>';
                }
                return '<i class="fa fa-check fa-2x" style="color:green;"></i> '+isRejected+' ';
            }

            function getTodayPayment(payments) {
                // uncomments these line to get only today payments
                //var date1 = new Date().toDateString();
                //var date2 = new Date().toDateString();
                //payments= payments.filter(function(entry) {
                //    var paymentDate = new Date(entry.PaymentDateFormatted).toDateString();
                //    return (
                //        //date1 >= new Date(paymentDate).getTime() && date2<= new Date(paymentDate).getTime()
                //        (date1 === new Date(paymentDate).toDateString() || date2 === new Date(paymentDate).toDateString())
                //            || (date1 < new Date(paymentDate).toDateString() && date2 > new Date(paymentDate).toDateString())
                //    );
                //});
                return payments;
            }


            var grid =  $("#paymentList").kendoGrid({
                resizable: true,
                height: 550,
                groupable: true,
                sortable: true,
                toolbar: "<p class='alert alert-info'>Note: Rejected Payments are displayed in <i style='color:red; text-decoration:line-through;'>Red</i></p>",

                excel: {
                    fileName: $("#paymentDt1").val()+" "+$("#paymentDt2").val()+" payments.xlsx",
                    allPages:true
                },
                pageable: {
                    pageSize: 20,
                    alwaysVisible: false,
                    pageSizes: [5, 10, 15, "all"]
                },
                columns: [{
                    field: "Id",
                    title: "Voucher#",
                    //template: "#if(IsVoid==true){# <div style='text-align: center;'>#= Id # </div>#}else {#<div style='text-align: center;'><a href='@Url.Action("Details", "Payment")?paymentId=#= Id#'>#= Id #</a></div>#}#",
                    template: "<a href='@Url.Action("Details", "Payment")?paymentId=#= Id#'>#= Id #</a>"

                },
                    {
                        field: "PaymentDateFormatted",
                        title: "Payment Date"
                    },
                    {
                        field: "PaymentType.PaymentType1",
                        title: "Payment Type",
                        template: "#= (PaymentType == null) ? 'Regular ' : PaymentType.PaymentType1 #"
                    },
                    {
                        field: "PatientCID",
                        title: "P_CID"
                    },
                    {
                        field: "PatientFullName",
                        title: "Patient Name"
                    },
                    {
                        field: "CompanionCID",
                        title: "C_CID"
                    },
                    //{
                    //    field: "PaymentLengthPeriod",
                    //    title: "Period"
                    //},
                    {
                        field: "PaymentStartDateFormatted",
                        title: "From"
                        // template: "#= kendo.toString(kendo.parseDate(PaymentStartDate, 'yyyy-MM-dd'), 'MM/dd/yyyy') #"
                    },
                    {
                        field: "PaymentEndDateFormatted",
                        title: "To"
                        // template: "#= kendo.toString(kendo.parseDate(PaymentEndDate, 'yyyy-MM-dd'), 'MM/dd/yyyy') #"
                    },
                    {
                        field: "PaymentDeductionObject.TotalDeduction",
                        title: "Amount Deducted",
                        template: "#if(PaymentDeductionObject!=null){# #: PaymentDeductionObject.TotalDeduction # #}else {##: '0' ##}#"
                    },
                    {
                        field: "TotalDue",
                        title: "Final Amount"
                    },
                    // Uncomment the next lines once the invoice is complete
                    {
                        field: "IsApproved",
                        title: "Is Approved",
                        template: "#if(IsApproved==true){# <div style='text-align: center;'><i class='fa fa-check fa-2x' style='color:limegreen;'></i></div> #}else {#<div style='text-align: center;'><input type='checkbox' #= IsApproved ? 'checked=checked' : '' # id='#=Id#'  class='k-checkbox' #= IsApproved ? disabled='disabled' : ''# ></input></div>#}#",
                        hidden: !isAuditor
                    },

                    {
                        field: "Id",
                        title: "Delete",
                        template: getTemplate('#=Id#'),
                        hidden: !isAdmin
                    },
                    {
                        field: "Id",
                        title: "Void",
                        // template: getVoidTemplate('#=Id#'),
                        template: "#if(IsVoid==true){# <div style='text-align: center;'><i class='fa fa-ban' style='color:OrangeRed;'></i></div> #}else {#<div style='text-align: center;'><a href=\"javascript:confirmDelete('#=Id#','paymentId', true)\" id='#= Id#'> <i class='fa fa-times' style='color:Crimson;'></i></a></div>#}#",
                        hidden: !isAccountant
                    }
                    //,{
                    //    field: "IsRejected",
                    //    title: "Valid?",
                    //    template: getRejectedTemplate('#=IsRejected#')
                    //}
                ],
                dataSource: {
                    data: getTodayPayment(data)
                },
                dataBound: function(e) {
                    // get the index of the UnitsInStock cell
                    // var columns = e.sender.columns;
                    // var columnIndex = this.wrapper.find(".k-grid-header [data-field=" + "UnitsInStock" + "]").index();

                    // iterate the table rows and apply custom row and cell styling
                    var rows = e.sender.tbody.children();
                    for (var j = 0; j < rows.length; j++) {
                        var row = $(rows[j]);
                        var dataItem = e.sender.dataItem(row);

                        //var units = dataItem.get("UnitsInStock");
                        var discontinued = dataItem.get("IsRejected");

                        if (discontinued) {
                            row.addClass("isRejected");
                        }

                        //var cell = row.children().eq(columnIndex);
                        //cell.addClass(getUnitsInStockClass(units));
                    }
                },
                //

                excelExport: function(e) {
                    var sheet = e.workbook.sheets[0];
                    var data = grid.dataSource.data();
                    var gridColumns = grid.columns;
                    var columns = gridColumns.map(function(col) {
                        return {
                            value: col.title ? col.title : col.field,
                            autoWidth: true,
                            background: "#7a7a7a",
                            color: "#fff"
                        };
                    });

                    var rows = [{ cells: columns, type: "header" }];

                    for (var i = 0; i < data.length; i++) {
                        var rowCells = [];
                        for (var j = 0; j < gridColumns.length; j++) {
                            var cellValue = data[i][gridColumns[j].field];
                            rowCells.push({ value: cellValue });
                        }
                        rows.push({ cells: rowCells, type: "data" });
                    }
                    sheet.rows = rows;
                }
                //
            }).data("kendoGrid");


            //search grid
            function onSearch(e) {
                debugger;
                e.preventDefault();
                //$("#searchPayment").keyup(function () {
                var q = $("#txtSearchString").val();
                q = q.toString();
                grid.dataSource.query({
                    page:1,
                    pageSize:20,
                    filter:{
                        logic:"or",
                        filters:[
                          {field:"PaymentIDString", operator:"contains",value:q},
                          {field:"PatientCID", operator:"contains",value:q}
                        ]
                    }
                });

                //  });
            }
            function onClear(e) {
                debugger;
                e.preventDefault();
                //$("#searchPayment").keyup(function () {
                $("#txtSearchString").val("");
                var q = "";
                grid.dataSource.query({
                    page:1,
                    pageSize:20,
                    filter:{
                        logic:"or",
                        filters:[
                          {field:"PaymentIDString", operator:"contains",value:q},
                          {field:"PatientCID", operator:"contains",value:q}
                        ]
                    }
                });

                //  });
            }
            $("#btnSearch").kendoButton({
                click: onSearch
            });
            $("#btnClear").kendoButton({
                click: onClear
            });
            $('#txtSearchString').on('keydown', function(e) {
                //debugger;
                if (e.which == 13) {
                    // e.preventDefault();
                    onSearch(e);
                }
            });
            //

            //approved payment
            $("[name='paymentApprovement']").change(function() {
                //alert($(this).val());
                var nextPaymentUrl = '/Payment/ToggleApprovedPayment';
                var $this = $(this);
                var selectorId = $this.val();
                console.log(selectorId);
                $.ajax({
                    type: "GET",
                    url: nextPaymentUrl,
                    contentType: "application/json; charset=utf-8",
                    data: { "toggleType": selectorId },
                    dataType: 'json',
                    beforeSend: function() {
                        //$("#loading-image").show();
                        $(".loader").css("display", "block");
                    },
                    success: function(result) {
                        grid.dataSource.data( result );
                        grid.refresh();
                        $(".loader").css("display", "none");
                    },
                    error: function () {
                        alert("Dynamic content load failed.");
                    }
                });
            });

            function updateApprovedPayment() {
                debugger;
                var checked = this.checked,
                    row = $(this).closest("tr"),
                  //  grid = $("#paymentList").data("kendoGrid"),
                    dataItem = grid.dataItem(row);

                //checkedIds[dataItem.FirstName] = checked;

                if (checked) {
                    //-select the row
                    row.addClass("k-state-selected");
                } else {
                    //-remove selection
                    row.removeClass("k-state-selected");
                }
                var nextPaymentUrl = '/Payment/RefreshPaymentListAfterApproval';
                var $this = $(this);
                var selectorId = $this.attr('id');
                $.ajax({
                    type: "GET",
                    url: nextPaymentUrl,
                    contentType: "application/json; charset=utf-8",
                    data: { "paymentId": selectorId },
                    dataType: 'json',
                    beforeSend: function() {
                        //$("#loading-image").show();
                        $(".loader").css("display", "block");
                    },
                    success: function(result) {
                        grid.dataSource.data( result );
                        grid.refresh();
                        $(".loader").css("display", "none");
                    },
                    error: function () {
                        alert("Dynamic content load failed.");
                    }
                });
                //
            }

            grid.table.on("click", ".k-checkbox", updateApprovedPayment);
            //
            $(".loader").css("display", "none");
        });
    </script>

    @* new February 28, 2019 *@
    <script type="text/javascript">

        //function printPayment() {
        //    var grid = $("#paymentGrid").data("kendoGrid");
        //    grid.saveAsExcel();
        //    console.log("Print excel payment");
        //}
        function getApprovedPayment() {
            //alert($(this).val());
            // return new Promise(function (resolve, reject) {
            //$.ajax(options).done(resolve).fail(reject);
            var id = $("[name='paymentApprovement']:checked").val();
            
            var approvedPayment=[];
            var approvedPaymentUrl = '/Payment/GetApprovedPayment';
            $.ajax({
                type: "GET",
                url: approvedPaymentUrl,
                contentType: "application/json; charset=utf-8",
                data: { "id": id },
                dataType: 'json',
                async: false,// this option is depricated, It slows down the browser response, Temp fix, should be handeled
                beforeSend: function() {
                    //$("#loading-image").show();
                    $(".loader").css("display", "block");
                },
                success: function(result) {
                    approvedPayment = result;
                    $(".loader").css("display", "none");
                    //return approvedPayment;
                },
                error: function () {
                    approvedPayment = [];
                    $(".loader").css("display", "none");
                }
            });

            return approvedPayment;
        };
        function showTodayPayments() {
            
            var firstDate = $('#paymentDt1').val();
            var secondDate = $('#paymentDt2').val();
            //console.log(getApprovedPayment());
            $("#payment1").html(firstDate);
            $('#payment2').html(function() {
                if (secondDate && firstDate) {
                    return " | " + secondDate;
                }
                return secondDate;
            });
            $('#todayPaymentList').modal('show');
            var date1 = new Date(firstDate).toDateString();
            date1 = new Date(date1).getTime();

            var date2 = new Date(secondDate).toDateString();
            date2 = new Date(date2).getTime();
            var payments =   @Html.Raw(jsonModel);

            payments = payments.filter(function(entry) {
                var paymentDate = new Date(entry.PaymentDateFormatted).toDateString();

                return (
                    //date1 >= new Date(paymentDate).getTime() && date2<= new Date(paymentDate).getTime()
                    (date1 === new Date(paymentDate).getTime() || date2 === new Date(paymentDate).getTime())
                        || (date1 < new Date(paymentDate).getTime() && date2 > new Date(paymentDate).getTime())
                );
            }).sort(function(a, b) {
                // Turn your strings into dates, and then subtract them
                // to get a value that is either negative, positive, or zero.
                return new Date(a.PaymentDateFormatted) - new Date(b.PaymentDateFormatted);
            });
            var paymentGrid = $("#paymentGrid").kendoGrid({
                toolbar: [
//"pdf",
                    "excel"
                ],
                //pdf: {
                //    fileName: firstDate+" "+secondDate+" payments.pdf"
                //},
                excel: {
                    fileName: firstDate + " " + secondDate + " Payments.xlsx",
                    allPages: true
                },
                pageable: {
                    pageSize: 10,
                    alwaysVisible: false
                },
                columns: [
                    {
                        field: "PaymentDateLongFormatted",
                        title: "Payment Date"
                    }, {
                        field: "PatientFormatedPhone",
                        title: "Patient Phone"
                    },
                    {
                        field: "PatientCID",
                        title: "P_CID"
                    }, {
                        field: "PaymentStartDateLongFormatted",
                        title: "From",
                        //format: "{0: dddd, MMMM dd, yyyy}",
                        //template: "#= kendo.toString(kendo.parseDate(PaymentStartDateFormatted, 'yyyy-MM-dd'), 'MM/dd/yyyy') #"
                        //  template: "#= kendo.toString(kendo.parseDate(PaymentStartDate, 'MMMM dd, yyyy'), 'MMMM dd, yyyy') #"
                    },
                    {
                        field: "PaymentEndDateLongFormatted",
                        title: "To",
                        // template: "#= kendo.toString(kendo.parseDate(PaymentEndDate, 'yyyy-MM-dd'), 'MM/dd/yyyy') #"
                        // template: "#= kendo.toString(kendo.parseDate(PaymentEndDate, 'MMMM dd, yyyy'), 'MMMM dd, yyyy') #"
                    }, {
                        field: "TotalDue",
                        title: "Final Amount"
                    }
                    ,
                       {
                           field: "PaymentDeductionNotes",
                           title: "Deduction Notes",
                           //template: "#if(PaymentDeductionObject!=null){# #: PaymentDeductionObject.Notes # #}#"
                       }
                       ,
                       {
                           field: "Notes",
                           title: "Payment Notes",
                           //template: "#if(PaymentDeductionObject!=null){# #: PaymentDeductionObject.Notes # #}#"
                       }
                ],
                dataSource: {
                    data: payments
                },
                //
                excelExport: function(e) {
                    var sheet = e.workbook.sheets[0];
                    var data = paymentGrid.dataSource.data();
                    var gridColumns = paymentGrid.columns;
                    var columns = gridColumns.map(function(col) {
                        return {
                            value: col.title ? col.title : col.field,
                            autoWidth: true,
                            background: "#7a7a7a",
                            color: "#fff"
                        };
                    });

                    var rows = [{ cells: columns, type: "header" }];

                    for (var i = 0; i < data.length; i++) {
                        var rowCells = [];
                        for (var j = 0; j < gridColumns.length; j++) {
                            var cellValue = data[i][gridColumns[j].field];
                            rowCells.push({ value: cellValue });
                        }
                        rows.push({ cells: rowCells, type: "data" });
                    }
                    sheet.rows = rows;
                }
            }).data("kendoGrid");;

        }

        $(function() {
            $("#deleteConfirmModal").on('click', "#deleteConfirm", function() {

            });
        });

    </script>

    @* new June 29, 2019 *@
    <script type="text/javascript">


        function showNextPatientPayments() {
            var numberOfDays = $('#numberOfDays').val();

            var payments=@Html.Raw(jsonModel);

            var nextPaymentUrl = '/Payment/GetNextPayment';
            if(numberOfDays)
                $.ajax({
                    type: "GET",
                    url: nextPaymentUrl,
                    contentType: "application/json; charset=utf-8",
                    data: { "numberOfDays": numberOfDays },
                    dataType: 'json',
                    //maxJsonLength:
                    success: function (result) {
                        // console.log(result);
                        var patientPaymentGrid = $("#patientDueForNextPaymentGrid").kendoGrid({
                            toolbar: [
                                "excel"
                            ],
                            excel: {
                                fileName: " payments that are due in " + numberOfDays + " Day(s).xlsx",
                                allPages: true
                            },
                            pageable: {
                                pageSize: 10,
                                alwaysVisible: false
                            },
                            columns: [
                                {
                                    field: "PatientCID",
                                    title: "P_CID"
                                },
                                {
                                    field: "PaymentDateFormatted",
                                    title: "Payment Date"
                                },
                                {
                                    field: "PaymentStartDateFormatted",
                                    title: "Start Date"
                                },
                                 {
                                     field: "PaymentEndDateFormatted",
                                     title: "End Date",
                                     //template: "#= kendo.toString(kendo.parseDate(PaymentStartDate, 'yyyy-MM-dd'), 'MM/dd/yyyy') #"
                                 }, {
                                     field: "TotalDue",
                                     title: "Amount"
                                 },
                                //{
                                //    field: "FinalAmountAfterCorrection",
                                //    title: "Amount Paid",
                                //    // template: "#= kendo.toString(kendo.parseDate(PaymentEndDate, 'yyyy-MM-dd'), 'MM/dd/yyyy') #"
                                //}
                            ],
                            dataSource: {
                                data: result
                            },
                            //
                            excelExport: function(e) {
                                var sheet = e.workbook.sheets[0];
                                var data = patientPaymentGrid.dataSource.data();
                                var gridColumns = patientPaymentGrid.columns;
                                var columns = gridColumns.map(function(col) {
                                    return {
                                        value: col.title ? col.title : col.field,
                                        autoWidth: true,
                                        background: "#7a7a7a",
                                        color: "#fff"
                                    };
                                });

                                var rows = [{ cells: columns, type: "header" }];

                                for (var i = 0; i < data.length; i++) {
                                    var rowCells = [];
                                    for (var j = 0; j < gridColumns.length; j++) {
                                        var cellValue = data[i][gridColumns[j].field];
                                        rowCells.push({ value: cellValue });
                                    }
                                    rows.push({ cells: rowCells, type: "data" });
                                }
                                sheet.rows = rows;
                            }
                            //
                        }).data("kendoGrid");
                        $('#patientDueForNextPayment').modal('show');
                    },
                    error: function () {
                        alert("Dynamic content load failed.");
                    }
                });
        }

        $(function () {
            $("#deleteConfirmModal").on('click', "#deleteConfirm", function () {

            });
        });

    </script>
}