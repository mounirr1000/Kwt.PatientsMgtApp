@model Kwt.PatientsMgtApp.Core.Models.PaymentModel

@{
    ViewBag.Title = "New Payment";
}



<div class="loader"></div>

<fieldset>
    <legend class="text-capitalize">Please Enter Patient CID to add a payment</legend>
    <ul class="fieldlist">
        <li>
            @using (Html.BeginForm("Create", "Payment", FormMethod.Get))
            {
                @Html.TextBox("patientCid", null, new { placeholder = "Enter Patient CID", id = "patientCid", @class = "k-textbox" })
                <button type="submit" class="k-button"><i class="fa fa-search" style="color: greenyellow"></i> Search</button>
            }
        </li>
    </ul>
</fieldset>

@if (Model.PatientCID != null && Model.IsActive)
{
    using (Html.BeginForm())
    {
        <div class="mt-3">
            <p>
                <a href="@Url.Action("List")" class="k-button"><i class="fa fa-arrow-left" style="color: lightblue"></i> Back to List</a>
                <button type="submit" class="k-button"><i class="fa fa-save" style="color: blueviolet"></i> Save</button>
            </p>
        </div>
        <div class="m-3 pl-4">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        </div>
        @Html.AntiForgeryToken()
        <div id="contentPaymentDetail" style="visibility: hidden;">
            <button data-toggle="collapse" data-target="#paymentDetails"><i></i> Payment Details</button>
            <fieldset class="collapse show" id="paymentDetails">
                @*<legend>Payment Details</legend>*@
                <ul class="fieldlist form-row">
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PatientCID, new {@class = ""})
                        @Html.TextBoxFor(model => model.PatientCID, new {@class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly"})
                        @Html.HiddenFor(model => model.PatientCID)
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PaymentDate, new {@class = ""})
                        @Html.TextBoxFor(model => model.PaymentDate, new {@class = "", style = "width: 100%;"})
                    </li>
                    @if (Model.PayRates != null && !String.IsNullOrEmpty(Model.CompanionCID))
                {
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.CompanionPayRate, new {@class = ""})
                        @Html.DropDownListFor(model => model.CompanionPayRate, new List<SelectListItem>
                            (Model.PayRates.Select(a => new SelectListItem()
                            {
                                Text = a.CompanionRate.ToString(),
                                Value = a.CompanionRate.ToString()
                            }).ToList()))
                        <div>@Html.ValidationMessageFor(model => model.CompanionPayRate, "", new {@class = "text-danger"})</div>
                    </li>
                }
                else
                {
                    <li class="col-md-3">
                    </li>
                }
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PatientPayRate, new {@class = ""})
                        @if (Model.PayRates != null)
                    {
                        @Html.DropDownListFor(model => model.PatientPayRate, new List<SelectListItem>
                            (Model.PayRates.Select(a => new SelectListItem()
                            {
                                Text = a.PatientRate.ToString(),
                                Value = a.PatientRate.ToString()
                            }).ToList()))
                    }
                    else
                    {
                        @Html.TextBoxFor(model => model.PatientPayRate, new {@class = "k-textbox", style = "width: 100%;"})
                    }
                        <div>@Html.ValidationMessageFor(model => model.PatientPayRate, "", new {@class = "text-danger"})</div>
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PaymentStartDate, new {@class = ""})
                        @Html.TextBoxFor(model => model.PaymentStartDate, new {@class = "", style = "width: 100%;"})
                        <div>@Html.ValidationMessageFor(model => model.PaymentStartDate, "", new {@class = "text-danger"})</div>
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PaymentEndDate, new {@class = ""})
                        @Html.TextBoxFor(model => model.PaymentEndDate, new {@class = "", style = "width: 100%;"})
                        <div>@Html.ValidationMessageFor(model => model.PaymentEndDate, "", new {@class = "text-danger"})</div>
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PaymentLengthPeriod, new {@class = ""})
                        @Html.TextBoxFor(model => (model.PaymentLengthPeriod), new {@class = "k-textbox paymentEdit", style = "width: 100%;", @readonly = "readonly"})
                        @Html.HiddenFor(model => model.PaymentLengthPeriod)
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PatientAmount, new {@class = ""})
                        @Html.TextBoxFor(model => model.PatientAmount, new {@class = "k-textbox paymentEdit", style = "width: 100%;", @readonly = "readonly"})
                        @Html.HiddenFor(model => model.PatientAmount)
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.CompanionAmount, new {@class = ""})
                        @Html.TextBoxFor(model => model.CompanionAmount, new {@class = "k-textbox paymentEdit", style = "width: 100%;", @readonly = "readonly"})
                        @Html.HiddenFor(model => model.CompanionAmount)
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.TotalDue, new {@class = ""})
                        @Html.TextBoxFor(model => model.TotalDue, new {@class = "k-textbox paymentEdit", style = "width: 100%;", @readonly = "readonly"})
                        @Html.HiddenFor(model => model.TotalDue)
                    </li>
                    <li class="col-md-6">
                        @Html.LabelFor(model => model.Notes, new {@class = ""})
                        @Html.TextAreaFor(model => model.Notes, new {@class = "k-textbox", style = "width: 100%;", maxlength = "250"})
                        <div style="text-transform: uppercase; text-transform: capitalize; color: #444; font-size: 12px;">
                            <span id="chars">250</span> characters remaining
                        </div>
                        <div>@Html.ValidationMessageFor(model => model.Notes, "", new {@class = "text-danger"})</div>
                    </li>
                </ul>
            </fieldset>
            @* Deduction section *@
            @if (Model.PaymentDeductionObject.LastPaymentStartDate != null &&
                                         Model.PaymentDeductionObject.LastPaymentEndDateFormatted != null)
            {
                <button data-toggle="collapse" data-target="#deductionDetails"><i></i>Deduction Details</button>
                <fieldset class="collapse show" id="deductionDetails">
                    @* Deduction section *@
                    @*<legend>Deduction Details</legend>*@
                    <ul class="fieldlist form-row">
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.PaymentDeductionObject.PatientCID, new { @class = "" })
                            @Html.TextBoxFor(model => model.PaymentDeductionObject.PatientCID, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                            @Html.HiddenFor(model => model.PaymentDeductionObject.PatientCID)
                        </li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.PatientPayRate, new { @class = "" })

                            @if (Model.PayRates != null)
                        {
                            @Html.DropDownListFor(model => model.PatientPayRate, new List<SelectListItem>
                                (Model.PayRates.Select(a => new SelectListItem()
                                {
                                    Text = a.PatientRate.ToString(),
                                    Value = a.PatientRate.ToString()

                                }).ToList()), new { @class = "k-dropdown" })
                            }
                            else
                            {
                            @Html.TextBoxFor(model => model.PatientPayRate, new { @class = "k-textbox", style = "width: 100%;" })
                            }

                            <div>@Html.ValidationMessageFor(model => model.PatientPayRate, "", new { @class = "text-danger" })</div>
                        </li>
                        @if (Model.PayRates != null && !String.IsNullOrEmpty(Model.CompanionCID))
                        {
                            <li class="col-md-3">
                                @Html.LabelFor(model => model.CompanionPayRate, new { @class = "" })
                                @*@Html.TextBoxFor(model => model.CompanionPayRate, new {@class = "k-textbox", style = "width: 100%;"})*@

                                @Html.DropDownListFor(model => model.CompanionPayRate, new List<SelectListItem>
                                (Model.PayRates.Select(a => new SelectListItem()
                                {
                                    Text = a.CompanionRate.ToString(),
                                    Value = a.CompanionRate.ToString()

                                }).ToList()), new { @class = "k-dropdown" })

                                <div>@Html.ValidationMessageFor(model => model.CompanionPayRate, "", new { @class = "text-danger" })</div>
                            </li>
                        }
                        else
                        {
                            <li class="col-md-3"></li>
                        }

                        <li class="col-md-3"></li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.PaymentDeductionObject.LastPaymentStartDate, new {@class = ""})
                            @Html.TextBoxFor(model => model.PaymentDeductionObject.LastPaymentStartDateFormatted, new {@class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly"})
                            @Html.HiddenFor(model => model.PaymentDeductionObject.LastPaymentStartDate)
                        </li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.PaymentDeductionObject.LastPaymentEndDate, new {@class = ""})
                            @Html.TextBoxFor(model => model.PaymentDeductionObject.LastPaymentEndDateFormatted, new {@class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly"})
                            @Html.HiddenFor(model => model.PaymentDeductionObject.LastPaymentEndDate)
                        </li>
                        <li class="col-md-3"></li>
                        <li class="col-md-3"></li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.PaymentDeductionObject.PatientStartDate, new {@class = ""})
                            @Html.TextBoxFor(model => model.PaymentDeductionObject.PatientStartDate, new {@class = "", style = "width: 100%;"})
                            <div>@Html.ValidationMessageFor(model => model.PaymentDeductionObject.PatientStartDate, "", new {@class = "text-danger"})</div>
                        </li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.PaymentDeductionObject.PatientEndDate, new {@class = ""})
                            @Html.TextBoxFor(model => model.PaymentDeductionObject.PatientEndDate, new {@class = "", style = "width: 100%;"})
                            <div>@Html.ValidationMessageFor(model => model.PaymentDeductionObject.PatientEndDate, "", new {@class = "text-danger"})</div>
                        </li>

                        <li class="col-md-3">
                            @Html.LabelFor(model => model.PaymentDeductionObject.PatientDeduction, new {@class = ""})
                            @Html.TextBoxFor(model => model.PaymentDeductionObject.PatientDeduction, new {@class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly"})
                            @Html.HiddenFor(model => model.PaymentDeductionObject.PatientDeduction)
                        </li>
                        <li class="col-md-3"></li>
                        @if (Model.HasCompanion != null && Model.HasCompanion == true)
                        {
                            <li class="col-md-3">
                                @Html.LabelFor(model => model.PaymentDeductionObject.CompanionStartDate, new { @class = "" })
                                @Html.TextBoxFor(model => model.PaymentDeductionObject.CompanionStartDate, new { @class = "", style = "width: 100%;" })
                                <div>@Html.ValidationMessageFor(model => model.PaymentDeductionObject.CompanionStartDate, "", new { @class = "text-danger" })</div>
                            </li>
                            <li class="col-md-3">
                                @Html.LabelFor(model => model.PaymentDeductionObject.CompanionEndDate, new { @class = "" })
                                @Html.TextBoxFor(model => model.PaymentDeductionObject.CompanionEndDate, new { @class = "", style = "width: 100%;" })
                                <div>@Html.ValidationMessageFor(model => model.PaymentDeductionObject.CompanionEndDate, "", new { @class = "text-danger" })</div>
                            </li>
                            <li class="col-md-3">
                                @Html.LabelFor(model => model.PaymentDeductionObject.CompanionDeduction, new {@class = ""})
                                @Html.TextBoxFor(model => model.PaymentDeductionObject.CompanionDeduction, new {@class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly"})
                                @Html.HiddenFor(model => model.PaymentDeductionObject.CompanionDeduction)
                            </li>
                            <li class="col-md-3"></li>
                        }


                        <li class="col-md-3">
                            @Html.LabelFor(model => model.PaymentDeductionObject.DeductionPeriod, new { @class = "" })
                            @Html.TextBoxFor(model => (model.PaymentDeductionObject.DeductionPeriod), new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                            @Html.HiddenFor(model => model.PaymentDeductionObject.DeductionPeriod)
                        </li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.PaymentDeductionObject.AmountPaid, new { @class = "" })
                            @Html.TextBoxFor(model => model.PaymentDeductionObject.AmountPaid, new { @class = "k-textbox", style = "width: 100%;", @readonly = "readonly" })
                            @Html.HiddenFor(model => model.PaymentDeductionObject.AmountPaid)
                        </li>


                        <li class="col-md-3">
                            @Html.LabelFor(model => model.PaymentDeductionObject.TotalDeduction, new { @class = "" })
                            @Html.TextBoxFor(model => model.PaymentDeductionObject.TotalDeduction, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                            @Html.HiddenFor(model => model.PaymentDeductionObject.TotalDeduction)
                        </li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.PaymentDeductionObject.FinalAmount, new { @class = "" })
                            @Html.TextBoxFor(model => model.PaymentDeductionObject.FinalAmount, new { @class = "k-textbox", style = "width: 100%;", @readonly = "readonly" })
                            @Html.HiddenFor(model => model.PaymentDeductionObject.FinalAmount)
                        </li>
                        <li class="col-md-6">
                            @Html.LabelFor(model => model.PaymentDeductionObject.Notes, new { @class = "" })
                            @Html.TextAreaFor(model => model.PaymentDeductionObject.Notes, new { @class = "k-textbox", style = "width: 100%;" })
                            <div>@Html.ValidationMessageFor(model => model.PaymentDeductionObject.Notes, "", new { @class = "text-danger" })</div>
                        </li>
                    </ul>
                </fieldset>
            }

            <button data-toggle="collapse" data-target="#patientDetails"><i></i> Patient Information</button>
            <fieldset class="collapse" id="patientDetails">
                <legend>Patient Information</legend>
                <ul class="fieldlist form-row">
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PatientCID, new { @class = "" })
                        @Html.TextBoxFor(model => model.PatientCID, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                        @Html.HiddenFor(model => model.PatientCID)
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PatientFName, new { @class = "" })
                        @Html.TextBoxFor(model => model.PatientFName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PatientMName, new { @class = "" })
                        @Html.TextBoxFor(model => model.PatientMName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PatientLName, new { @class = "" })
                        @Html.TextBoxFor(model => model.PatientLName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                    </li>
                    <li class="col-md-8">
                        @Html.LabelFor(model => model.Hospital, new { @class = "" })
                        @Html.TextBoxFor(model => model.Hospital, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                        @Html.HiddenFor(model => model.Hospital)
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.Agency, new { @class = "" })
                        @Html.TextBoxFor(model => model.Agency, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                        @Html.HiddenFor(model => model.Agency)
                    </li>
                </ul>
            </fieldset>
            @if (Model.CompanionCID != null)
            {
                <button data-toggle="collapse" data-target="#companionDetails"><i></i> Companion Information</button>
                <fieldset class="collapse" id="companionDetails">
                    <legend>Companion Information</legend>
                    <ul class="fieldlist form-row">
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.CompanionCID, new { @class = "" })
                            @Html.TextBoxFor(model => model.CompanionCID, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                            @Html.HiddenFor(model => model.CompanionCID)
                        </li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.CompanionFName, new { @class = "" })
                            @Html.TextBoxFor(model => model.CompanionFName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                        </li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.CompanionMName, new { @class = "" })
                            @Html.TextBoxFor(model => model.CompanionMName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                        </li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.CompanionLName, new { @class = "" })
                            @Html.TextBoxFor(model => model.CompanionLName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                        </li>

                    </ul>
                </fieldset>
            }
            <button data-toggle="collapse" data-target="#benDetails"><i></i> Beneficiary Information</button>
            <fieldset class="collapse" id="benDetails">
                <legend>Beneficiary Information</legend>
                <ul class="fieldlist form-row">
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.BeneficiaryCID, new { @class = "" })
                        @Html.TextBoxFor(model => model.BeneficiaryCID, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                        @Html.HiddenFor(model => model.BeneficiaryCID)
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.BeneficiaryFName, new { @class = "" })
                        @Html.TextBoxFor(model => model.BeneficiaryFName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.BeneficiaryMName, new { @class = "" })
                        @Html.TextBoxFor(model => model.BeneficiaryMName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.BeneficiaryLName, new { @class = "" })
                        @Html.TextBoxFor(model => model.BeneficiaryLName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                    </li>
                </ul>
            </fieldset>

            <button data-toggle="collapse" data-target="#bankDetails"><i></i> Beneficiary Bank Information</button>
            <fieldset class="collapse" id="bankDetails">
                <legend>Beneficiary Bank Information</legend>
                <ul class="fieldlist form-row">
                    <li class="col-md-6">
                        @Html.LabelFor(model => model.BeneficiaryBank, new { @class = "" })
                        @Html.TextBoxFor(model => model.BeneficiaryBank, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    </li>
                    <li class="col-md-6">
                        @Html.LabelFor(model => model.BeneficiaryIBan, new { @class = "" })
                        @Html.TextBoxFor(model => model.BeneficiaryIBan, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    </li>
                </ul>
            </fieldset>
            <button data-toggle="collapse" data-target="#payHistoryDetails"><i></i> Payment History for the patient</button>
            <fieldset class="collapse" id="payHistoryDetails">
                <legend>Payment History for the patient</legend>
                @if (Model.Payments.Any())
                {
                    <div id="patientPaymentInfo"></div>
                }
                else
                {
                    <span>No payment found in our records for this patient</span>
                }
            </fieldset>
        </div>
        <div class="mt-3">
            <p>
                <a href="@Url.Action("List")" class="k-button"><i class="fa fa-arrow-left" style="color: lightblue"></i> Back to List</a>
                <button type="submit" class="k-button"><i class="fa fa-save" style="color: blueviolet"></i> Save</button>
            </p>
        </div>
        <div class="m-3 pl-4">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        </div>
    }
}
@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        //this fixes the issue of kendo datepicker disapear when the form is submited with error
        $("form").submit(function(event) {
            $(".k-widget").removeClass("input-validation-error");
        });
        //debugger;
        var patientCids = @Html.Raw(Json.Encode(Model.ActivePatientCidList));
        if (patientCids != null) {
            localStorage.setItem("cids", patientCids);
        }
        if (localStorage.getItem("cids") === null) {
            localStorage.setItem("cids", JSON.stringify(patientCids));
        } else {
            var idsString = localStorage.getItem("cids");
            patientCids = idsString.split(",");
        }
        $('document').ready(function () {
            $("#contentPaymentDetail").css("visibility", "visible");
            $(".loader").css("display", "none");
            $("#PaymentDate").kendoDatePicker({
                value: new Date()
            });

            var payHistory = @Html.Raw(Json.Encode(Model.Payments));
            $("#patientPaymentInfo").kendoGrid({
                resizable: true,
                pageable: {
                    pageSize: 5,
                    alwaysVisible: false
                },
                columns: [
                    {
                        field: "BeneficiaryCID",
                        title: "Ben CID"
                    },
                    {
                        field: "BeneficiaryFullName",
                        title: "Ben Name"
                    },
                    {
                        field: "PaymentDateFormatted",
                        title: "Payment Date"
                    },
                    {
                        field: "PaymentStartDateFormatted",
                        title: "Start Date"
                    },
                    {
                        field: "PaymentEndDateFormatted",
                        title: "End Date"
                    },
                    {
                        field: "CompanionPayRate",
                        title: "CRate"
                    },
                    {
                        field: "PatientPayRate",
                        title: "PRate"
                    },
                    {
                        field: "TotalDue",
                        title: "Final Amount"
                    }],
                dataSource: {
                    data: payHistory
                }
            });
            var maxLength = 250;
            var intialLength = 0;
            if ($('#Notes').val()) {
                intialLength = $('#Notes').val().length;
            }

            if (intialLength > 0) {
                $('#chars').text(intialLength);
            }

            $('#Notes').keyup(function () {
                var length = $(this).val().length;
                length = maxLength - length;
                $('#chars').text(length);
            });


        });
        $("#patientCid").kendoAutoComplete({
            dataSource: patientCids,
            filter: "startswith",
            placeholder: "Select Patient Civil ID..."
        });
        $('#contentPaymentDetail button').addClass('btn btn-block mb-2 text-uppercase text-white bg-info');
        $('#contentPaymentDetail button i').addClass('fa fa-angle-double-down pull-left');
        $('#contentPaymentDetail button').click(function (event) {
            var $this = this;
            event.preventDefault();
            var caret =$($this).find('i');
            if ($(caret).hasClass('fa-angle-double-down'))
                $(caret).removeClass('fa-angle-double-down').addClass("fa-angle-double-up");
            else
                $(caret).removeClass('fa-angle-double-up').addClass("fa-angle-double-down");

        });

       
        
    </script>
    <script type="text/javascript">
        var lastEndDatePayment = @Html.Raw(Json.Encode(Model?.PaymentDeductionObject?.LastPaymentEndDateFormatted));
        var newStartdate = new Date();
        if (lastEndDatePayment&&lastEndDatePayment !=null) {
            newStartdate=  new Date(lastEndDatePayment);
            newStartdate.setDate(newStartdate.getDate() + 1);
        }
        var start= $("#PaymentStartDate").kendoDatePicker({
            value: newStartdate,
            min: newStartdate,
            change: startChange,
            footer: "<button id='cleardate' class='k-button' onclick='clearDate(PaymentStartDate)'>Clear</button>"
        }).attr("readonly", "").data("kendoDatePicker");
        var newStartDate = $('#PaymentStartDate').val();
        var newEndDate = new Date();
        if (newStartDate && newStartDate != null) {
            newEndDate = new Date(newStartDate);
            newEndDate.setDate(newEndDate.getDate() + 1);
        }
        var end=   $("#PaymentEndDate").kendoDatePicker({
            value: newEndDate,
            // min: newEndDate,
            change: endChange,
            footer: "<button id='cleardate' class='k-button' onclick='clearDate(PaymentEndDate)'>Clear</button>"
        }).attr("readonly", "").data("kendoDatePicker");

        if (newEndDate && newStartdate) {
            setPayment();
            setDeduction();
        }
        start.max(end.value());
        end.min(start.value());

        var patStartDate= $("#PaymentDeductionObject_PatientStartDate").kendoDatePicker({
            change: doChanges,
            footer: "<button id='cleardate' class='k-button' onclick='clearDate(PaymentDeductionObject_PatientStartDate)'>Clear</button>"
        }).attr("readonly","").data("kendoDatePicker");
        var patEndDate= $("#PaymentDeductionObject_PatientEndDate").kendoDatePicker({
            change: doChanges,
            footer: "<button id='cleardate' class='k-button' onclick='clearDate(PaymentDeductionObject_PatientEndDate)'>Clear</button>"
        }).attr("readonly","").data("kendoDatePicker");
        var compStartDate=  $("#PaymentDeductionObject_CompanionStartDate").kendoDatePicker({
            change: doChanges,
            footer: "<button id='cleardate' class='k-button' onclick='clearDate(PaymentDeductionObject_CompanionStartDate)'>Clear</button>"
        }).attr("readonly","").data("kendoDatePicker");
        var compEndDate=  $("#PaymentDeductionObject_CompanionEndDate").kendoDatePicker({
            change: doChanges,
            footer: "<button id='cleardate' class='k-button' onclick='clearDate(PaymentDeductionObject_CompanionEndDate)'>Clear</button>"
        }).attr("readonly","").data("kendoDatePicker");


        function clearDate(elementId) {

            setTimeout(function() {
                $(elementId).data("kendoDatePicker").value(null);
                setPayment();
                setDeduction();
            });

        }
        function DaysDiff(startDate, endDate) {
            // debugger;
            var diff = new Date(new Date(startDate) - new Date(endDate));
            diff = diff / (1000 * 60 * 60 * 24);
            if (diff < 0) {
                diff = diff * -1;
            }
            if(diff && diff>0)
                return Math.round(diff + 1);
            return 0;
        }
        function deductionPeriod(paDays, coDays) {
            var period = 0;
            if (paDays)
                period = period + parseInt(paDays);
            if (coDays)
                period = period + parseInt(coDays);
            //if(patientDays>0&&companionDays>0)
            //    period = parseInt(patientDays) + parseInt(companionDays);
            return period;
        }
        function displayProperColor(finalAmount) {


            if (finalAmount && parseInt(finalAmount) == 0) {
                $("#PaymentDeductionObject_FinalAmount").removeAttr("style");
            }
            if (finalAmount && finalAmount > 0) {
                $("#PaymentDeductionObject_FinalAmount").css({ "background-color": "#2cc34f", 'color': 'white' });
            }
            else {
                $("#PaymentDeductionObject_FinalAmount").css({ "background-color": "red", 'color': 'white' });
            }
        }
        function doChanges() {

            var patientdeductionStartDate = $("#PaymentDeductionObject_PatientStartDate").val();
            var patientdeductionEndDate = $("#PaymentDeductionObject_PatientEndDate").val();
            var companiondeductionStartDate = $("#PaymentDeductionObject_CompanionStartDate").val();
            var companiondeductionEndDate = $("#PaymentDeductionObject_CompanionEndDate").val();
            var patientdays = DaysDiff(patientdeductionStartDate, patientdeductionEndDate);
            var companiondays = DaysDiff(companiondeductionStartDate, companiondeductionEndDate);

            finalAmount = 0;
            var patdaysDiff = 0;
            var compdaysDiff = 0;

            if (patientdays) {
                patdaysDiff = lastPaymentsDiff - patientdays;
            }
            if ( companiondays) {
                compdaysDiff = lastPaymentsDiff - companiondays;
            }
            setValues(patdaysDiff, compdaysDiff);

            //change the patient deduction end date min value
            patEndChange();
            //change the companion deduction end date min value
            compEndChange();
            //change the end date deduction min value
            patStartChange();
            //change the end date deduction min value
            compStartChange();
        }
        var companionAmount = 0;
        var patientAmount = 0;
        var companionDeduction = 0;
        var patientDeduction = 0;
        var compRate = $("#CompanionPayRate").val();
        var patRate = $("#PatientPayRate").val();
        var total = 0;
        var lastPaymentStartDate = $("#PaymentDeductionObject_LastPaymentStartDateFormatted").val();
        var lastPaymentEndDate = $("#PaymentDeductionObject_LastPaymentEndDateFormatted").val();
        var lastPaymentsDiff = DaysDiff(lastPaymentStartDate, lastPaymentEndDate);
        var finalAmount = 0;
        $('#CompanionPayRate, #PatientPayRate, #PaymentStartDate, #PaymentEndDate').change(function () {
            // debugger;

            setPayment();
            // get the amount paid from total due
            setDeduction();
            //
        });


        function setPayment() {
            var days = DaysDiff($("#PaymentStartDate").val(), $("#PaymentEndDate").val());
            if ($("#PaymentEndDate").val() && $("#PaymentStartDate").val() && days >= 0) {
                $("#PaymentLengthPeriod").val(days);
                var period = $("#PaymentLengthPeriod").val();
                var companionRate = $("#CompanionPayRate").val() * period;
                var patientRate = $("#PatientPayRate").val() * period;
                var companionAmount = 0;
                var patientAmount = 0;
                if (companionRate >= 0) {
                    $("#CompanionAmount").val(companionRate);
                    companionAmount = $("#CompanionAmount").val();
                }
                if (companionRate) {

                }
                $("#PatientAmount").val(patientRate);

                patientAmount = $("#PatientAmount").val();

                $("#TotalDue").val(parseInt(patientAmount) + parseInt(companionAmount));


            } else {
                $("#PaymentLengthPeriod").val("");
                $("#PatientAmount").val(0.00);
                $("#CompanionAmount").val(0.00);
                $("#TotalDue").val(0.00);
            }
        }
        function setDeduction() {

            var patientdeductionStartDate = $("#PaymentDeductionObject_PatientStartDate").val();
            var patientdeductionEndDate = $("#PaymentDeductionObject_PatientEndDate").val();
            var companiondeductionStartDate = $("#PaymentDeductionObject_CompanionStartDate").val();
            var companiondeductionEndDate = $("#PaymentDeductionObject_CompanionEndDate").val();
            var patientdays = DaysDiff(patientdeductionStartDate, patientdeductionEndDate);
            var companiondays = DaysDiff(companiondeductionStartDate, companiondeductionEndDate);
            $('#PaymentDeductionObject_AmountPaid').val($("#TotalDue").val());
            $("#PaymentDeductionObject_FinalAmount").val(
                $("#PaymentDeductionObject_AmountPaid").val() - $("#PaymentDeductionObject_TotalDeduction").val());
            finalAmount = $('#PaymentDeductionObject_FinalAmount').val();
            displayProperColor(finalAmount);

            var patdaysDiff = 0;
            var compdaysDiff = 0;
            //debugger;
            if (patientdays) {
                patdaysDiff = lastPaymentsDiff - patientdays;

            }if (companiondays) {
                compdaysDiff = lastPaymentsDiff - companiondays;
            }
            setValues(patdaysDiff, compdaysDiff);
        }
        function setValues(patientdaysDiff, companiondaysDiff) {

            if (patientdaysDiff > 0 || companiondaysDiff > 0) {// we shoud do deduction
                doDeduction(patientdaysDiff, companiondaysDiff);
                $("#PaymentDeductionObject_DeductionPeriod").val(deductionPeriod(patientdaysDiff, companiondaysDiff));
                finalAmount = $('#PaymentDeductionObject_FinalAmount').val();
                displayProperColor(finalAmount);
            }
            if (patientdaysDiff < 0 || companiondaysDiff < 0) {
                doAddition(patientdaysDiff, companiondaysDiff);
                $("#PaymentDeductionObject_DeductionPeriod").val(deductionPeriod(patientdaysDiff, companiondaysDiff));
                finalAmount = $('#PaymentDeductionObject_FinalAmount').val();
                displayProperColor(finalAmount);
            }
            if ((!patientdaysDiff || patientdaysDiff == 0)) {
                $("#PaymentDeductionObject_PatientDeduction").val(0.00);
            }
            if (companiondaysDiff == 0) {
                $("#PaymentDeductionObject_CompanionDeduction").val(0.00);

            }
            if ((patientdaysDiff == 0 || !patientdaysDiff)) {
                if (companiondaysDiff == 0 || !companiondaysDiff) {
                    $("#PaymentDeductionObject_FinalAmount").val($("#PaymentDeductionObject_AmountPaid").val()).removeAttr("style");
                    $("#PaymentDeductionObject_TotalDeduction").val(0.00);
                }
            }
            if (companiondaysDiff == 0 || !companiondaysDiff) {
                if (patientdaysDiff == 0 || !patientdaysDiff) {
                    $("#PaymentDeductionObject_FinalAmount").val($("#PaymentDeductionObject_AmountPaid").val()).removeAttr("style");
                    $("#PaymentDeductionObject_TotalDeduction").val(0.00);
                }
            }
        }
        function doDeduction(patientdays, companiondays) {
            //debugger;
            var patientRate = patRate * patientdays;
            var companionRate = compRate * companiondays;
            console.log("patient deduction", patientRate);
            console.log("comapanion deduction", companionRate);

            if (patientRate)
                $("#PaymentDeductionObject_PatientDeduction").val(patientRate);
            else $("#PaymentDeductionObject_PatientDeduction").val("");
            if (companionRate)
                $("#PaymentDeductionObject_CompanionDeduction").val(companionRate);
            else $("#PaymentDeductionObject_CompanionDeduction").val("");
            companionDeduction = $("#PaymentDeductionObject_CompanionDeduction").val();
            patientDeduction = $("#PaymentDeductionObject_PatientDeduction").val();


            if (patientDeduction)
                total = parseInt(patientDeduction);
            if (companionDeduction)
                total = total + parseInt(companionDeduction);
            if (!patientDeduction && companionDeduction)
                total = parseInt(companionDeduction);

            $("#PaymentDeductionObject_TotalDeduction").val(total);
            $("#PaymentDeductionObject_FinalAmount").val(
                $("#PaymentDeductionObject_AmountPaid").val() - $("#PaymentDeductionObject_TotalDeduction").val());

        }
        function doAddition(patientdays, companiondays) {
            // debugger;
            var patientRate = patRate * patientdays * -1;
            var companionRate = compRate * companiondays * -1;
            console.log("patient deduction", patientRate);
            console.log("comapanion deduction", companionRate);

            if (patientRate)
                $("#PaymentDeductionObject_PatientDeduction").val(patientRate);
            else $("#PaymentDeductionObject_PatientDeduction").val("");
            if (companionRate)
                $("#PaymentDeductionObject_CompanionDeduction").val(companionRate);
            else $("#PaymentDeductionObject_CompanionDeduction").val("");
            companionDeduction = $("#PaymentDeductionObject_CompanionDeduction").val();
            patientDeduction = $("#PaymentDeductionObject_PatientDeduction").val();


            if (patientDeduction)
                total = parseInt(patientDeduction);
            if (companionDeduction)
                total = total + parseInt(companionDeduction);
            if (!patientDeduction && companionDeduction)
                total = parseInt(companionDeduction);

            $("#PaymentDeductionObject_TotalDeduction").val(total);
            $("#PaymentDeductionObject_FinalAmount").val(
                parseInt($("#PaymentDeductionObject_AmountPaid").val()) +
                parseInt($("#PaymentDeductionObject_TotalDeduction").val()));

        }

        function startChange() {

            var startDate = start.value(),
                endDate = end.value();

            if (startDate) {
                startDate = new Date(startDate);
                startDate.setDate(startDate.getDate());
                end.min(startDate);
            } else if (endDate) {
                start.max(new Date(endDate));
            } else {
                endDate = new Date();
                start.max(endDate);
                end.min(endDate);
            }
        }

        function endChange() {
            var endDate = end.value(),
                startDate = start.value();

            if (endDate) {
                endDate = new Date(endDate);
                endDate.setDate(endDate.getDate());
                start.max(endDate);
            } else if (startDate) {
                end.min(new Date(startDate));
            } else {
                endDate = new Date();
                start.max(endDate);
                end.min(endDate);
            }
        }
        function patEndChange() {
            var patDeducEndDate = patStartDate.value();
            if (patDeducEndDate) {
                patDeducEndDate = new Date(patDeducEndDate);
                patDeducEndDate.setDate(patDeducEndDate.getDate());
                patEndDate.min(patDeducEndDate);
            }
        }
        function patStartChange() {
            var patDeducStartDate = patEndDate.value();
            if (patDeducStartDate) {
                patDeducStartDate = new Date(patDeducStartDate);
                patDeducStartDate.setDate(patDeducStartDate.getDate());
                patStartDate.max(patDeducStartDate);
            }
        }
        function compEndChange() {
            debugger;
            var compDeducEndDate = compStartDate.value();
            if (compDeducEndDate) {
                compDeducEndDate = new Date(compDeducEndDate);
                compDeducEndDate.setDate(compDeducEndDate.getDate());
                compEndDate.min(compDeducEndDate);
            }
        }
        function compStartChange() {
            debugger;
            var compDeducStartDate = compEndDate.value();
            if (compDeducStartDate) {
                compDeducStartDate = new Date(compDeducStartDate);
                compDeducStartDate.setDate(compDeducStartDate.getDate());
                compStartDate.max(compDeducStartDate);
            }
        }
    </script>
}


