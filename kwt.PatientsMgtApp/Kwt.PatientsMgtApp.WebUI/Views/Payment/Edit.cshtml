

@model Kwt.PatientsMgtApp.WebUI.Models.PaymentViewModel

@{
    ViewBag.Title = "Payment Details";
}



<div class="loader"></div>
@using (Html.BeginForm())
{
    <div class="mt-3">
        <p>
            <a href="@Url.Action("Details", new {paymentId = Model.Payment.Id})" class="k-button"><i class="fa fa-ban" style="color: lightblue"></i> Cancel</a>
            <button type="submit" class="k-button"><i class="fa fa-check" style="color: greenyellow"></i> Update</button>
        </p>
    </div>
    <div class="m-3 pl-4">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Payment.Id)
        @Html.HiddenFor(model => model.Payment.CreatedDate)
        @Html.HiddenFor(model => model.Payment.CreatedBy)
    </div>

    @Html.AntiForgeryToken()
    <div id="contentPaymentDetail" style="visibility: hidden;">

    <fieldset>
        <legend>Payment Details</legend>
        <ul class="fieldlist row">
            <li class="col-md-3">
                @Html.LabelFor(model => model.Payment.PaymentDate, new {@class = ""})
                @Html.TextBoxFor(model => model.Payment.PaymentDate, new {@class = "", style = "width: 60%;"})
                <div>@Html.ValidationMessageFor(model => model.Payment.PaymentDate, "", new {@class = "text-danger"})</div>
            </li>
            @if (Model.Payment.PayRates != null && !String.IsNullOrEmpty(Model.Payment.CompanionCID))
            {
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.CompanionPayRate, new {@class = ""})
                    @*@Html.TextBoxFor(model => model.CompanionPayRate, new {@class = "k-textbox", style = "width: 100%;"})*@

                    @Html.DropDownListFor(model => model.Payment.CompanionPayRate, new List<SelectListItem>
                        (Model.Payment.PayRates.Select(a => new SelectListItem()
                        {
                            Text = a.CompanionRate.ToString(),
                            Value = a.CompanionRate.ToString()

                        }).ToList()))

                    <div>@Html.ValidationMessageFor(model => model.Payment.CompanionPayRate, "", new {@class = "text-danger"})</div>
                </li>
            }
            <li class="col-md-3">
                @Html.LabelFor(model => model.Payment.PatientPayRate, new {@class = ""})

                @if (Model.Payment.PayRates != null)
                {
                    @Html.DropDownListFor(model => model.Payment.PatientPayRate, new List<SelectListItem>
                        (Model.Payment.PayRates.Select(a => new SelectListItem()
                        {
                            Text = a.PatientRate.ToString(),
                            Value = a.PatientRate.ToString()

                        }).ToList()))
                }
                else
                {
                    @Html.TextBoxFor(model => model.Payment.PatientPayRate, new {@class = "k-textbox", style = "width: 100%;"})
                }

                <div>@Html.ValidationMessageFor(model => model.Payment.PatientPayRate, "", new {@class = "text-danger"})</div>
            </li>
            <li class="col-md-3">
                @Html.LabelFor(model => model.Payment.PaymentStartDate, new {@class = ""})
                @Html.TextBoxFor(model => model.Payment.PaymentStartDate, new {@class = "", style = "width: 60%;"})
                <div>@Html.ValidationMessageFor(model => model.Payment.PaymentStartDate, "", new {@class = "text-danger"})</div>
            </li>
            <li class="col-md-3">
                @Html.LabelFor(model => model.Payment.PaymentEndDate, new {@class = ""})
                @Html.TextBoxFor(model => model.Payment.PaymentEndDate, new {@class = "", style = "width: 60%;"})
                <div>@Html.ValidationMessageFor(model => model.Payment.PaymentEndDate, "", new {@class = "text-danger"})</div>
            </li>
            <li class="col-md-3">
                @Html.LabelFor(model => model.Payment.PatientCID, new {@class = ""})
                @Html.TextBoxFor(model => model.Payment.PatientCID, new {@class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly"})
                @Html.HiddenFor(model => model.Payment.PatientCID)
            </li>
            <li class="col-md-3">
                @Html.LabelFor(model => model.Payment.PaymentLengthPeriod, new {@class = ""})
                @Html.TextBoxFor(model => (model.Payment.PaymentLengthPeriod), new {@class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly"})
                @Html.HiddenFor(model => model.Payment.PaymentLengthPeriod)
            </li>
            <li class="col-md-3">
                @Html.LabelFor(model => model.Payment.PatientAmount, new {@class = ""})
                @Html.TextBoxFor(model => model.Payment.PatientAmount, new {@class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly"})
                @Html.HiddenFor(model => model.Payment.PatientAmount)
            </li>
            <li class="col-md-3">
                @Html.LabelFor(model => model.Payment.CompanionAmount, new {@class = ""})
                @Html.TextBoxFor(model => model.Payment.CompanionAmount, new {@class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly"})
                @Html.HiddenFor(model => model.Payment.CompanionAmount)
            </li>
            <li class="col-md-3">
                @Html.LabelFor(model => model.Payment.TotalDue, new {@class = ""})
                @Html.TextBoxFor(model => model.Payment.TotalDue, new {@class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly"})
                @Html.HiddenFor(model => model.Payment.TotalDue)
            </li>
            <li class="col-md-6">
                @Html.LabelFor(model => model.Payment.Notes, new {@class = ""})
                @Html.TextAreaFor(model => model.Payment.Notes, new {@class = "k-textbox", style = "width: 100%;"})
                <div>@Html.ValidationMessageFor(model => model.Payment.Notes, "", new {@class = "text-danger"})</div>
            </li>
        </ul>
    </fieldset>
        @* Deduction section *@
        <fieldset>@* Deduction section *@
            <legend>Deduction Details</legend>
            <ul class="fieldlist row">
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.PaymentDate, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.PaymentDate, new { @class = "edit", style = "width: 60%;", @readonly = "readonly" })

                </li>
                @if (Model.Payment.PayRates != null && !String.IsNullOrEmpty(Model.Payment.CompanionCID))
                {
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.Payment.CompanionPayRate, new { @class = "" })
                        @*@Html.TextBoxFor(model => model.CompanionPayRate, new {@class = "k-textbox", style = "width: 100%;"})*@

                        @Html.DropDownListFor(model => model.Payment.CompanionPayRate, new List<SelectListItem>
                            (Model.Payment.PayRates.Select(a => new SelectListItem()
                            {
                                Text = a.CompanionRate.ToString(),
                                Value = a.CompanionRate.ToString()

                            }).ToList()), new { @class = "k-dropdown" })

                        <div>@Html.ValidationMessageFor(model => model.Payment.CompanionPayRate, "", new { @class = "text-danger" })</div>
                    </li>
                }
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.PatientPayRate, new {@class = ""})

                    @if (Model.Payment.PayRates != null)
                    {
                        @Html.DropDownListFor(model => model.Payment.PatientPayRate, new List<SelectListItem>
                            (Model.Payment.PayRates.Select(a => new SelectListItem()
                            {
                                Text = a.PatientRate.ToString(),
                                Value = a.PatientRate.ToString()

                            }).ToList()), new {@class = "k-dropdown"})
                    }
                    else
                    {
                        @Html.TextBoxFor(model => model.Payment.PatientPayRate, new {@class = "k-textbox", style = "width: 100%;"})
                    }

                    <div>@Html.ValidationMessageFor(model => model.Payment.PatientPayRate, "", new {@class = "text-danger"})</div>
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PaymentDeduction.PatientCID, new { @class = "" })
                    @Html.TextBoxFor(model => model.PaymentDeduction.PatientCID, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.PaymentDeduction.PatientCID)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PaymentDeduction.DeductionStartDate, new { @class = "" })
                    @Html.TextBoxFor(model => model.PaymentDeduction.DeductionStartDate, new { @class = "", style = "width: 60%;" })
                    <div>@Html.ValidationMessageFor(model => model.PaymentDeduction.DeductionStartDate, "", new { @class = "text-danger" })</div>
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PaymentDeduction.DeductionEndDate, new { @class = "" })
                    @Html.TextBoxFor(model => model.PaymentDeduction.DeductionEndDate, new { @class = "", style = "width: 60%;" })
                    <div>@Html.ValidationMessageFor(model => model.PaymentDeduction.DeductionEndDate, "", new { @class = "text-danger" })</div>
                </li>
                
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PaymentDeduction.DeductionPeriod, new {@class = ""})
                    @Html.TextBoxFor(model => (model.PaymentDeduction.DeductionPeriod), new {@class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly"})
                    @Html.HiddenFor(model => model.PaymentDeduction.DeductionPeriod)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PaymentDeduction.AmountPaid, new { @class = "" })
                    @Html.TextBoxFor(model => model.PaymentDeduction.AmountPaid, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.PaymentDeduction.AmountPaid)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PaymentDeduction.PatientDeduction, new { @class = "" })
                    @Html.TextBoxFor(model => model.PaymentDeduction.PatientDeduction, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.PaymentDeduction.PatientDeduction)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PaymentDeduction.CompanionDeduction, new { @class = "" })
                    @Html.TextBoxFor(model => model.PaymentDeduction.CompanionDeduction, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.PaymentDeduction.CompanionDeduction)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PaymentDeduction.TotalDeduction, new {@class = ""})
                    @Html.TextBoxFor(model => model.PaymentDeduction.TotalDeduction, new {@class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly"})
                    @Html.HiddenFor(model => model.PaymentDeduction.TotalDeduction)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PaymentDeduction.FinalAmount, new { @class = "" })
                    @Html.TextBoxFor(model => model.PaymentDeduction.FinalAmount, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.PaymentDeduction.FinalAmount)
                </li>
                <li class="col-md-6">
                    @Html.LabelFor(model => model.PaymentDeduction.Notes, new { @class = "" })
                    @Html.TextAreaFor(model => model.PaymentDeduction.Notes, new { @class = "k-textbox", style = "width: 100%;" })
                    <div>@Html.ValidationMessageFor(model => model.PaymentDeduction.Notes, "", new { @class = "text-danger" })</div>
                </li>
            </ul>
        </fieldset>
        <fieldset>
            <legend>Beneficiary Information</legend>
            <ul class="fieldlist row">
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.BeneficiaryCID, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.BeneficiaryCID, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.Payment.BeneficiaryCID)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.BeneficiaryFName, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.BeneficiaryFName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.BeneficiaryMName, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.BeneficiaryMName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.BeneficiaryLName, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.BeneficiaryLName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
            </ul>
        </fieldset>


        <fieldset>
            <legend>Beneficiary Bank Information</legend>
            <ul class="fieldlist row">
                <li class="col-md-6">
                    @Html.LabelFor(model => model.Payment.BeneficiaryBank, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.BeneficiaryBank, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-6">
                    @Html.LabelFor(model => model.Payment.BeneficiaryIBan, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.BeneficiaryIBan, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
            </ul>
        </fieldset>

        <fieldset>
            <legend>Patient Information</legend>
            <ul class="fieldlist row">
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.PatientCID, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.PatientCID, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.Payment.PatientCID)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.PatientFName, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.PatientFName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.PatientMName, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.PatientMName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.PatientLName, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.PatientLName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-8">
                    @Html.LabelFor(model => model.Payment.Hospital, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.Hospital, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.Payment.Hospital)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.Agency, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.Agency, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.Payment.Agency)
                </li>
            </ul>
        </fieldset>

        <fieldset>
            <legend>Companion Information</legend>
            <ul class="fieldlist row">
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.CompanionCID, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.CompanionCID, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.Payment.CompanionCID)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.CompanionFName, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.CompanionFName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.CompanionMName, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.CompanionMName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Payment.CompanionLName, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.CompanionLName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>

            </ul>
        </fieldset>
        <fieldset>
            <legend>Audit Info</legend>
            <ul class="fieldlist row">
                <li class="col-md-4">
                    @Html.LabelFor(model => model.Payment.CreatedBy, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.CreatedBy, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                </li>
                <li class="col-md-2">
                    @Html.LabelFor(model => model.Payment.CreatedDate, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.CreatedDateFormatted, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                </li>
                <li class="col-md-4">
                    @Html.LabelFor(model => model.Payment.ModifiedBy, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.ModifiedBy, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                </li>
                <li class="col-md-2">
                    @Html.LabelFor(model => model.Payment.ModifiedDate, new { @class = "" })
                    @Html.TextBoxFor(model => model.Payment.ModifiedDateFormatted, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                </li>
            </ul>
        </fieldset>

    </div>
}

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">

        $('document').ready(function () {
            $("#contentPaymentDetail").css("visibility", "visible");
            $(".loader").css("display", "none");
            $("#PaymentDate, #PaymentStartDate, #PaymentEndDate" +
                ",#PaymentDeductionObject_DeductionStartDate,#PaymentDeductionObject_DeductionEndDate").kendoDatePicker();

            var data= @Html.Raw(Json.Encode(Model));
            console.log(data);
        });
    </script>
    <script type="text/javascript">
        "use strict";
        var companionAmount = 0;
        var patientAmount = 0;
        var companionDeduction = 0;
        var patientDeduction = 0;
        var compRate = $("#CompanionPayRate").val();
        var patRate = $("#PatientPayRate").val();
        function DaysDiff(startDate, endDate) {
            var diff = new Date(new Date(startDate) - new Date(endDate));
            diff = diff / (1000 * 60 * 60 * 24);
            if (diff < 0) {
                diff = diff * -1;
            }
            return  Math.round(diff + 1);
        }
        $('#CompanionPayRate, #PatientPayRate, #PaymentStartDate, #PaymentEndDate').change(function () {
            var payStartDate = $("#PaymentStartDate").val();
            var payEndDate = $("#PaymentEndDate").val();
            var days= DaysDiff(payStartDate,payEndDate);
            if (payStartDate && payEndDate && days >= 0) {
                $("#PaymentLengthPeriod").val(days);
                var companionRate = compRate * days;
                var patientRate = patRate * days;
                if (companionRate >= 0) {// since sometimes the companion does not exist, so the rate can be zero
                    $("#CompanionAmount").val(companionRate);
                    companionAmount =  $("#CompanionAmount").val();
                }
                $("#PatientAmount").val(patientRate);
                patientAmount =  $("#PatientAmount").val();
                debugger;
                $("#TotalDue").val(parseInt(patientAmount) + parseInt(companionAmount));
            } else {
                $("#PaymentLengthPeriod").val("");
                $("#PatientAmount").val(0.00);
                $("#CompanionAmount").val(0.00);
                $("#TotalDue").val(0.00);
            }

        });
        $('#PaymentDeductionObject_DeductionStartDate, #PaymentDeductionObject_DeductionEndDate').change(function () {
            // debugger;
            var deductionStartDate = $("#PaymentDeductionObject_DeductionStartDate").val();
            var deductionEndDate = $("#PaymentDeductionObject_DeductionEndDate").val();
            console.log(deductionStartDate + "  =  " + deductionEndDate);
            var days= DaysDiff(deductionStartDate,deductionEndDate);
            if (deductionEndDate && deductionStartDate && days >= 0) {
                $("#PaymentLengthPeriod").val(days);
                var companionRate = compRate * days;
                var patientRate = patRate * days;
                if (companionRate >= 0) {// since sometimes the companion does not exist, so the rate can be zero
                    $("#PaymentDeductionObject_CompanionDeduction").val(companionRate);
                    companionDeduction =  $("#PaymentDeductionObject_CompanionDeduction").val();
                }
                $("#PaymentDeductionObject_PatientDeduction").val(patientRate);
                patientDeduction =  $("#PaymentDeductionObject_PatientDeduction").val();

                $("#PaymentDeductionObject_TotalDeduction").val(parseInt(patientDeduction) + parseInt(companionDeduction));
            } else {
                $("#PaymentLengthPeriod").val("");
                $("#PaymentDeductionObject_CompanionDeduction").val(0.00);
                $("#PaymentDeductionObject_PatientDeduction").val(0.00);
                $("#PaymentDeductionObject_TotalDeduction").val(0.00);
            }
            $("#PaymentDeductionObject_FinalAmount").val($("#PaymentDeductionObject_AmountPaid").val()-$("#PaymentDeductionObject_TotalDeduction").val());
        });


    </script>
}
