
@model Kwt.PatientsMgtApp.Core.Models.PaymentModel
@*@model Kwt.PatientsMgtApp.WebUI.Models.PaymentViewModel*@

@{
    ViewBag.Title = "Payment Details";
}



<div class="loader"></div>
@using (Html.BeginForm())
{
    <div class="mt-3">
        <p>
            <a href="@Url.Action("Details", new {paymentId = Model.Id})" class="k-button"><i class="fa fa-ban" style="color: lightblue"></i> Cancel</a>
            <button type="submit" class="k-button" id="formSubmit"><i class="fa fa-check" style="color: greenyellow"></i> Update</button>
        </p>
    </div>
    <div class="m-3 pl-4">
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.CreatedDate)
        @Html.HiddenFor(model => model.CreatedBy)
        @Html.HiddenFor(model => model.PaymentID)
        @Html.HiddenFor(model => model.PaymentDeductionObject.DeductionID)
        @Html.HiddenFor(model => model.PaymentDeductionObject.PaymentID)
        @Html.HiddenFor(model => model.PaymentDeductionObject.CreatedDate)
        @Html.HiddenFor(model => model.PaymentDeductionObject.CreatedBy)
        @Html.HiddenFor(model => model.PaymentDeductionObject.CompanionCID)
        @Html.HiddenFor(model => model.PaymentDeductionObject.BeneficiaryID)
        @Html.HiddenFor(model => model.PaymentDeductionObject.PayRateID)
        @Html.HiddenFor(model => model.RejectedPayment.RejectionID)
        @Html.HiddenFor(model => model.RejectedPayment.PaymentID)
        @Html.HiddenFor(model => model.RejectedPayment.CreatedDate)
        @Html.HiddenFor(model => model.RejectedPayment.CreatedBy)
        @Html.HiddenFor(model => model.RejectedPayment.RejectedDate)
        
        @*<div style="display: none;">@Html.EditorFor(model => model.RejectedPayments)</div>*@
        
    
    </div>

    @Html.AntiForgeryToken()
    <div id="contentPaymentDetail" style="visibility: hidden;">
        <button data-toggle="collapse" data-target="#paymentDetail"><i></i> Payment Detail</button>
        <fieldset id="paymentDetail" class="collapse show">
            <legend>Payment Details</legend>
            <ul class="fieldlist row">
                @* new 07-13-2019 *@
                @if (Model.IsThisPaymentCorrected == true)
                {
                    <li class="col-md-3">
                        <small class="text-sm-left text-info">This payment was corrected, You can't update it.</small>
                        <small class="text-sm-left text-info">To modify it, you need to delete the corrected payment with ID @Model.CorrectedPaymentId</small>
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.IsRejected, new {@class = ""})
                        @Html.DisplayFor(model => model.IsRejected, new {@class = "", style = "width: 100%;"})
                    </li>
                }
                else
                {
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.IsRejected, new { @class = "" })
                        @Html.EditorFor(model => model.IsRejected, new { @class = "", style = "width: 100%;" })
                    </li>
                }
                
                <li id="rejectedPaymentDetail"class="col-md-6">
                    <ul >
                        <li class="pr-2">
                            @Html.LabelFor(model => model.RejectedPayment.RejectionReasonID, new { @class = "" })
                            @Html.DropDownListFor(model => model.RejectedPayment.RejectionReasonID, new List<SelectListItem>
                        (Model.RejectionReasons.Select(a => new SelectListItem()
                        {
                            Text = a.RejectionReason1.ToString(),
                            Value = a.RejectionReasonID.ToString()

                        }).ToList()))
                        </li>
                        <li class="pr-2">
                            @Html.LabelFor(model => model.RejectedPayment.RejectionNotes, new { @class = "" })
                            @Html.TextAreaFor(model => model.RejectedPayment.RejectionNotes, new { @class = "", style = "width: 100%;" })
                        </li>
                    </ul>
                </li>
                @* end new *@
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PatientCID, new { @class = "" })
                    @Html.TextBoxFor(model => model.PatientCID, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.PatientCID)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PaymentDate, new { @class = "" })
                    @Html.TextBoxFor(model => model.PaymentDate, new { @class = "", style = "width: 60%;" })
                    <div>@Html.ValidationMessageFor(model => model.PaymentDate, "", new { @class = "text-danger" })</div>
                </li>
                @if (Model.PayRates != null && !String.IsNullOrEmpty(Model.CompanionCID))
                {
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.CompanionPayRate, new { @class = "" })
                        @*@Html.TextBoxFor(model => model.CompanionPayRate, new {@class = "k-textbox", style = "width: 100%;"})*@

                        @Html.DropDownListFor(model => model.CompanionPayRate, new List<SelectListItem>
                        (Model.PayRates.Select(a => new SelectListItem()
                        {
                            Text = a.CompanionRate.ToString(),
                            Value = a.CompanionRate.ToString()

                        }).ToList()))

                        <div>@Html.ValidationMessageFor(model => model.CompanionPayRate, "", new { @class = "text-danger" })</div>
                    </li>
                }
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PatientPayRate, new { @class = "" })

                    @if (Model.PayRates != null)
                {
                        @Html.DropDownListFor(model => model.PatientPayRate, new List<SelectListItem>
                        (Model.PayRates.Select(a => new SelectListItem()
                        {
                            Text = a.PatientRate.ToString(),
                            Value = a.PatientRate.ToString()

                        }).ToList()))
                    }
                    else
                    {
                        @Html.TextBoxFor(model => model.PatientPayRate, new { @class = "k-textbox", style = "width: 100%;" })
                    }

                    <div>@Html.ValidationMessageFor(model => model.PatientPayRate, "", new { @class = "text-danger" })</div>
                </li>

                <li class="col-md-3">
                    @Html.LabelFor(model => model.PaymentStartDate, new { @class = "" })
                    @Html.TextBoxFor(model => model.PaymentStartDate, new { @class = "", style = "width: 60%;" })
                    <div>@Html.ValidationMessageFor(model => model.PaymentStartDate, "", new { @class = "text-danger" })</div>
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PaymentEndDate, new { @class = "" })
                    @Html.TextBoxFor(model => model.PaymentEndDate, new { @class = "", style = "width: 60%;" })
                    <div>@Html.ValidationMessageFor(model => model.PaymentEndDate, "", new { @class = "text-danger" })</div>
                </li>

                <li class="col-md-3">
                    @Html.LabelFor(model => model.PaymentLengthPeriod, new { @class = "" })
                    @Html.TextBoxFor(model => (model.PaymentLengthPeriod), new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.PaymentLengthPeriod)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PatientAmount, new { @class = "" })
                    @Html.TextBoxFor(model => model.PatientAmount, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.PatientAmount)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.CompanionAmount, new { @class = "" })
                    @Html.TextBoxFor(model => model.CompanionAmount, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.CompanionAmount)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.TotalDue, new { @class = "" })
                    @Html.TextBoxFor(model => model.TotalDue, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.TotalDue)
                </li>
                <li class="col-md-6">
                    @Html.LabelFor(model => model.Notes, new { @class = "" })
                    @Html.TextAreaFor(model => model.Notes, new { @class = "k-textbox", style = "width: 100%;" })
                    <div>@Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })</div>
                </li>
            </ul>
        </fieldset>
        @* Deduction section *@
        @if (Model.PaymentDeductionObject.LastPaymentStartDate != null && Model.PaymentDeductionObject.LastPaymentEndDateFormatted != null)
        {
            <button data-toggle="collapse" data-target="#DeductionDetail"><i></i> Deduction Detail</button>
            <fieldset class="collapse show" id="deductionDetails">
                @* Deduction section *@
                @*<legend>Deduction Details</legend>*@
                <ul class="fieldlist form-row">
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PaymentDeductionObject.PatientCID, new { @class = "" })
                        @Html.TextBoxFor(model => model.PaymentDeductionObject.PatientCID, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                        @Html.HiddenFor(model => model.PaymentDeductionObject.PatientCID)
                    </li>
                    @*<li class="col-md-3">
                            @Html.LabelFor(model => model.PatientPayRate, new { @class = "" })

                            @if (Model.PayRates != null)
                        {
                                @Html.DropDownListFor(model => model.PatientPayRate, new List<SelectListItem>
                                (Model.PayRates.Select(a => new SelectListItem()
                                {
                                    Text = a.PatientRate.ToString(),
                                    Value = a.PatientRate.ToString()

                                }).ToList()), new { @class = "k-dropdown" })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.PatientPayRate, new { @class = "k-textbox", style = "width: 100%;" })
                            }

                            <div>@Html.ValidationMessageFor(model => model.PatientPayRate, "", new { @class = "text-danger" })</div>
                        </li>
                        @if (Model.PayRates != null && !String.IsNullOrEmpty(Model.CompanionCID))
                        {
                            <li class="col-md-3">
                                @Html.LabelFor(model => model.CompanionPayRate, new { @class = "" })


                                @Html.DropDownListFor(model => model.CompanionPayRate, new List<SelectListItem>
                                (Model.PayRates.Select(a => new SelectListItem()
                                {
                                    Text = a.CompanionRate.ToString(),
                                    Value = a.CompanionRate.ToString()

                                }).ToList()), new { @class = "k-dropdown" })

                                <div>@Html.ValidationMessageFor(model => model.CompanionPayRate, "", new { @class = "text-danger" })</div>
                            </li>
                        }
                        else
                        {
                            <li class="col-md-3"></li>
                        }*@

                    <li class="col-md-3"></li>
                    <li class="col-md-3"></li>
                    <li class="col-md-3"></li>
                    @*<li class="col-md-3">
                            @Html.LabelFor(model => model.PaymentDeductionObject.LastPaymentStartDate, new { @class = "" })
                            @Html.TextBoxFor(model => model.PaymentDeductionObject.LastPaymentStartDateFormatted, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                            @Html.HiddenFor(model => model.PaymentDeductionObject.LastPaymentStartDate)
                        </li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.PaymentDeductionObject.LastPaymentEndDate, new { @class = "" })
                            @Html.TextBoxFor(model => model.PaymentDeductionObject.LastPaymentEndDateFormatted, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                            @Html.HiddenFor(model => model.PaymentDeductionObject.LastPaymentEndDate)
                        </li>
                        <li class="col-md-3"></li>
                        <li class="col-md-3"></li>*@
                    <li class="col-md-2">
                        @Html.LabelFor(model => model.PaymentDeductionObject.PatientStartDate, new { @class = "" })
                        @Html.TextBoxFor(model => model.PaymentDeductionObject.PatientStartDate, new { @class = "", style = "width: 100%;" })
                        <div>@Html.ValidationMessageFor(model => model.PaymentDeductionObject.PatientStartDate, "", new { @class = "text-danger" })</div>
                    </li>
                    <li class="col-md-2">
                        @Html.LabelFor(model => model.PaymentDeductionObject.PatientEndDate, new { @class = "" })
                        @Html.TextBoxFor(model => model.PaymentDeductionObject.PatientEndDate, new { @class = "", style = "width: 100%;" })
                        <div>@Html.ValidationMessageFor(model => model.PaymentDeductionObject.PatientEndDate, "", new { @class = "text-danger" })</div>
                    </li>
                    @* patient deduction rate *@
                    <li class="col-md-2">
                        @Html.LabelFor(model => model.PatientDeductionRate, new { @class = "" })
                        @if (Model.PayRates != null)
                        {
                            @Html.DropDownListFor(model => model.PatientDeductionRate, new List<SelectListItem>
                                    (Model.PayRates.Select(a => new SelectListItem()
                                    {
                                        Text = a.PatientRate.ToString(),
                                        Value = a.PatientRate.ToString()
                                    }).ToList()))
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.PatientDeductionRate, new { @class = "k-textbox", style = "width: 100%;" })
                        }
                        @*<div>@Html.ValidationMessageFor(model => model.PatientDeductionRate, "", new {@class = "text-danger"})</div>*@
                    </li>

                    <li class="col-md-2">
                        <!--new changes-->
                        <label for="PatientDeudctionPeriod">Patient Period</label>
                        <input type="number" name="PatientDeudctionPeriod" style="width: 100%;" id="PatientDeudctionPeriod" class="k-textbox" />
                        @*<small class="text-info">Enter Number of days to be deducted for Patient</small>*@
                        @*<small class="text-info">Use Positive Number for deduction and Negative Number for Addition</small>*@
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PaymentDeductionObject.PatientDeduction, new { @class = "" })
                        @Html.TextBoxFor(model => model.PaymentDeductionObject.PatientDeduction, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                        @Html.HiddenFor(model => model.PaymentDeductionObject.PatientDeduction)
                    </li>
                    @*<li class="col-md-3"></li>*@
                    @if (Model.HasCompanion != null && Model.HasCompanion == true)
                    {
                        <li class="col-md-2">
                            @Html.LabelFor(model => model.PaymentDeductionObject.CompanionStartDate, new { @class = "" })
                            @Html.TextBoxFor(model => model.PaymentDeductionObject.CompanionStartDate, new { @class = "", style = "width: 100%;" })
                            <div>@Html.ValidationMessageFor(model => model.PaymentDeductionObject.CompanionStartDate, "", new { @class = "text-danger" })</div>
                        </li>
                        <li class="col-md-2">
                            @Html.LabelFor(model => model.PaymentDeductionObject.CompanionEndDate, new { @class = "" })
                            @Html.TextBoxFor(model => model.PaymentDeductionObject.CompanionEndDate, new { @class = "", style = "width: 100%;" })
                            <div>@Html.ValidationMessageFor(model => model.PaymentDeductionObject.CompanionEndDate, "", new { @class = "text-danger" })</div>
                        </li>
                        @* companion deduction rate *@
                        <li class="col-md-2">
                            @Html.LabelFor(model => model.CompanionDeductionRate, new { @class = "" })
                            @if (Model.PayRates != null)
                            {
                                @Html.DropDownListFor(model => model.CompanionDeductionRate, new List<SelectListItem>
                                (Model.PayRates.Select(a => new SelectListItem()
                                {
                                    Text = a.CompanionRate.ToString(),
                                    Value = a.CompanionRate.ToString()
                                }).ToList()))
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.CompanionDeductionRate, new { @class = "k-textbox", style = "width: 100%;" })
                            }
                            <div>@Html.ValidationMessageFor(model => model.CompanionDeductionRate, "", new { @class = "text-danger" })</div>
                        </li>
                        <li class="col-md-2">
                            <!--new changes-->
                            <label for="CompanionDeudctionPeriod">Comp Deduction Period</label>
                            <input type="number" name="CompanionDeudctionPeriod" style="width: 100%;" id="CompanionDeudctionPeriod" class="k-textbox" />
                            @*<small class="text-info">Enter Number of days to be deducted for Companion</small>*@
                        </li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.PaymentDeductionObject.CompanionDeduction, new { @class = "" })
                            @Html.TextBoxFor(model => model.PaymentDeductionObject.CompanionDeduction, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                            @Html.HiddenFor(model => model.PaymentDeductionObject.CompanionDeduction)
                        </li>
                        @*<li class="col-md-3"></li>*@
                    }


                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PaymentDeductionObject.DeductionPeriod, new { @class = "" })
                        @Html.TextBoxFor(model => (model.PaymentDeductionObject.DeductionPeriod), new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                        @Html.HiddenFor(model => model.PaymentDeductionObject.DeductionPeriod)
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PaymentDeductionObject.AmountPaid, new { @class = "" })
                        @Html.TextBoxFor(model => model.PaymentDeductionObject.AmountPaid, new { @class = "k-textbox", style = "width: 100%;", @readonly = "readonly" })
                        @Html.HiddenFor(model => model.PaymentDeductionObject.AmountPaid)
                    </li>


                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PaymentDeductionObject.TotalDeduction, new { @class = "" })
                        @Html.TextBoxFor(model => model.PaymentDeductionObject.TotalDeduction, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                        @Html.HiddenFor(model => model.PaymentDeductionObject.TotalDeduction)
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.PaymentDeductionObject.FinalAmount, new { @class = "" })
                        @Html.TextBoxFor(model => model.PaymentDeductionObject.FinalAmount, new { @class = "k-textbox", style = "width: 100%;", @readonly = "readonly" })
                        @Html.HiddenFor(model => model.PaymentDeductionObject.FinalAmount)
                    </li>
                    @* new deduction reason *@

                    <li class="col-md-4">
                        @Html.LabelFor(model => model.PaymentDeductionObject.DeductionReasonId, new { @class = "" })
                        @if (Model.PaymentDeductionObject != null
             && Model.PaymentDeductionObject.DeductionReasons != null)
                        {
                            @Html.DropDownListFor(model => model.PaymentDeductionObject.DeductionReasonId, new List<SelectListItem>
                                    (Model.PaymentDeductionObject.DeductionReasons.Select(a => new SelectListItem()
                                    {
                                        Text = a.Reason.ToString(),
                                        Value = a.ReasonId.ToString()
                                    }).ToList()))
                        }
                    </li>
                    <li class="col-md-6">
                        @Html.LabelFor(model => model.PaymentDeductionObject.Notes, new { @class = "" })
                        @Html.TextAreaFor(model => model.PaymentDeductionObject.Notes, new { @class = "k-textbox", style = "width: 100%;" })
                        <div>@Html.ValidationMessageFor(model => model.PaymentDeductionObject.Notes, "", new { @class = "text-danger" })</div>
                    </li>
                </ul>
            </fieldset>
        }
        <button data-toggle="collapse" data-target="#BenInfo"><i></i> Beneficiary Info</button>
        <fieldset id="BenInfo" class="collapse">
            <legend>Beneficiary Information</legend>
            <ul class="fieldlist row">
                <li class="col-md-3">
                    @Html.LabelFor(model => model.BeneficiaryCID, new { @class = "" })
                    @Html.TextBoxFor(model => model.BeneficiaryCID, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.BeneficiaryCID)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.BeneficiaryFName, new { @class = "" })
                    @Html.TextBoxFor(model => model.BeneficiaryFName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.BeneficiaryMName, new { @class = "" })
                    @Html.TextBoxFor(model => model.BeneficiaryMName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.BeneficiaryLName, new { @class = "" })
                    @Html.TextBoxFor(model => model.BeneficiaryLName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
            </ul>
        </fieldset>

        <button data-toggle="collapse" data-target="#benBankInfo"><i></i> Beneficiary Bank Info</button>
        <fieldset class="collapse" id="benBankInfo">
            <legend>Beneficiary Bank Information</legend>
            <ul class="fieldlist row">
                <li class="col-md-6">
                    @Html.LabelFor(model => model.BeneficiaryBank, new { @class = "" })
                    @Html.TextBoxFor(model => model.BeneficiaryBank, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-6">
                    @Html.LabelFor(model => model.BeneficiaryIBan, new { @class = "" })
                    @Html.TextBoxFor(model => model.BeneficiaryIBan, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
            </ul>
        </fieldset>

        <button data-toggle="collapse" data-target="#patInfo"><i></i> Patient Info</button>
        <fieldset class="collapse" id="patInfo">
            <legend>Patient Information</legend>
            <ul class="fieldlist row">
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PatientCID, new { @class = "" })
                    @Html.TextBoxFor(model => model.PatientCID, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.PatientCID)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PatientFName, new { @class = "" })
                    @Html.TextBoxFor(model => model.PatientFName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PatientMName, new { @class = "" })
                    @Html.TextBoxFor(model => model.PatientMName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.PatientLName, new { @class = "" })
                    @Html.TextBoxFor(model => model.PatientLName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-8">
                    @Html.LabelFor(model => model.Hospital, new { @class = "" })
                    @Html.TextBoxFor(model => model.Hospital, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.Hospital)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.Agency, new { @class = "" })
                    @Html.TextBoxFor(model => model.Agency, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.Agency)
                </li>
            </ul>
        </fieldset>

        <button data-toggle="collapse" data-target="#compInfo"><i></i> Companion Info</button>
        <fieldset class="collapse" id="compInfo">
            <legend>Companion Information</legend>
            <ul class="fieldlist row">
                <li class="col-md-3">
                    @Html.LabelFor(model => model.CompanionCID, new { @class = "" })
                    @Html.TextBoxFor(model => model.CompanionCID, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.CompanionCID)
                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.CompanionFName, new { @class = "" })
                    @Html.TextBoxFor(model => model.CompanionFName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.CompanionMName, new { @class = "" })
                    @Html.TextBoxFor(model => model.CompanionMName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>
                <li class="col-md-3">
                    @Html.LabelFor(model => model.CompanionLName, new { @class = "" })
                    @Html.TextBoxFor(model => model.CompanionLName, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })

                </li>

            </ul>
        </fieldset>

        <button data-toggle="collapse" data-target="#AuditInfo"><i></i> Audit Info</button>
        <fieldset class="collapse" id="AuditInfo">
            <legend>Audit Info</legend>
            <ul class="fieldlist row">
                <li class="col-md-4">
                    @Html.LabelFor(model => model.CreatedBy, new { @class = "" })
                    @Html.TextBoxFor(model => model.CreatedBy, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                </li>
                <li class="col-md-2">
                    @Html.LabelFor(model => model.CreatedDate, new { @class = "" })
                    @Html.TextBoxFor(model => model.CreatedDateFormatted, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                </li>
                <li class="col-md-4">
                    @Html.LabelFor(model => model.ModifiedBy, new { @class = "" })
                    @Html.TextBoxFor(model => model.ModifiedBy, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                </li>
                <li class="col-md-2">
                    @Html.LabelFor(model => model.ModifiedDate, new { @class = "" })
                    @Html.TextBoxFor(model => model.ModifiedDateFormatted, new { @class = "k-textbox edit", style = "width: 100%;", @readonly = "readonly" })
                </li>
            </ul>
        </fieldset>

    </div>
}

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $("form").submit(function(event) {
            $(".k-widget").removeClass("input-validation-error");
        });
        $('document').ready(function() {
            var isRejected = $('#IsRejected').val();
            if(isRejected && isRejected=='true'){
                $('#rejectedPaymentDetail').show();
            }else{
                $('#rejectedPaymentDetail').hide();
            }
            $('#IsRejected').change(function() {
                isRejected = $('#IsRejected').val();
                console.log(isRejected);
                if(isRejected && isRejected=='true'){
                    $('#rejectedPaymentDetail').show();
                }else{
                    $('#rejectedPaymentDetail').hide();
                }
            });
        });
    </script>
    <script type="text/javascript">

        $('document').ready(function() {
            $('#contentPaymentDetail button').addClass('btn btn-block mb-2 text-uppercase text-white bg-info');
            //fa fa-angle-double-down pull-left
            $('#contentPaymentDetail button i').addClass('fa fa-angle-double-down pull-left');
            $('#contentPaymentDetail button').click(function (event) {
                var $this = this;
                event.preventDefault();
                var caret =$($this).find('i');
                if ($(caret).hasClass('fa-angle-double-down'))
                    $(caret).removeClass('fa-angle-double-down').addClass("fa-angle-double-up");
                else
                    $(caret).removeClass('fa-angle-double-up').addClass("fa-angle-double-down");

            });
            $("#contentPaymentDetail").css("visibility", "visible");
            $(".loader").css("display", "none");
            $("#Payment_PaymentDate, #Payment_PaymentStartDate, #Payment_PaymentEndDate" +
                ",#PaymentDeduction_DeductionStartDate,#PaymentDeduction_DeductionEndDate, " +
                "#PaymentDeduction_PatientStartDate ,#PaymentDeduction_PatientEndDate ," +
                "#PaymentDeduction_CompanionStartDate ,#PaymentDeduction_CompanionEndDate").kendoDatePicker();
            $("#PaymentDate").kendoDatePicker({
            });

            //new disable form inputs when the payment is rejected and corrected
            var wasPaymentCorrected = @Html.Raw(Json.Encode(Model.IsThisPaymentCorrected));
            if (wasPaymentCorrected && JSON.parse(wasPaymentCorrected) == true) {
                //$("#contentPaymentDetail :input").prop("disabled", true);
                //paymentDate.enable(false);
                $('#formSubmit').attr("disabled", wasPaymentCorrected);
                $("#formSubmit").attr('title', 'Payment cannot be updated');
            } else {
                
                $('#formSubmit').attr("disabled", false);
                
            }
            
        });
    </script>
    <script type="text/javascript">
        var companionAmount = 0;
        var patientAmount = 0;
        var companionDeduction = 0;
        var patientDeduction = 0;
        var compRate = $("#CompanionPayRate").val();
        var patRate = $("#PatientPayRate").val();
        //new change
        var compDeductionRate = $("#CompanionDeductionRate").val();
        var patDeductionRate = $("#PatientDeductionRate").val();
        var total = 0;
        var lastPaymentStartDate = $("#PaymentDeductionObject_LastPaymentStartDateFormatted").val();
        var lastPaymentEndDate = $("#PaymentDeductionObject_LastPaymentEndDateFormatted").val();
        // new changes
        var lastPaymentsDiff = 0;// DaysDiff(lastPaymentStartDate, lastPaymentEndDate);
        //var lastPaymentsDiff = DaysDiff(lastPaymentStartDate, lastPaymentEndDate);
        var finalAmount = 0;
        var lastEndDatePayment = @Html.Raw(Json.Encode(Model?.PaymentDeductionObject?.LastPaymentEndDateFormatted));
        var newStartdate = new Date();
        if (lastEndDatePayment&&lastEndDatePayment !=null) {
            newStartdate=  new Date(lastEndDatePayment);
            newStartdate.setDate(newStartdate.getDate() + 1);
        }
        var start= $("#PaymentStartDate").kendoDatePicker({
            format: 'MM/dd/yyyy',
            //value: newStartdate,
            // min: newStartdate,// temp fix
            change: startChange,
            footer: "<button id='cleardate' class='k-button' onclick='clearDate(PaymentStartDate)'>Clear</button>"
        }).attr("readonly", "").data("kendoDatePicker");
        var newStartDate = $('#PaymentStartDate').val();
        var newEndDate = new Date();
        if (newStartDate && newStartDate != null) {
            newEndDate = new Date(newStartDate);
            newEndDate.setDate(newEndDate.getDate() + 1);
        }
        var end=   $("#PaymentEndDate").kendoDatePicker({
            //value: newEndDate,
            // min: newEndDate,
            change: endChange,
            footer: "<button id='cleardate' class='k-button' onclick='clearDate(PaymentEndDate)'>Clear</button>"
        }).attr("readonly", "").data("kendoDatePicker");

        if (newEndDate && newStartdate) {
            // setPayment();
            //  setDeduction();
            debugger;
            setPayment();
            setDeduction();
        }
        start.max(end.value());
        end.min(start.value());

        $("#PatientDeudctionPeriod, #CompanionDeudctionPeriod, #CompanionPayRate").on('input', function() {
            doChanges();
        });


        var patStartDate= $("#PaymentDeductionObject_PatientStartDate").kendoDatePicker({
            change:  doChanges,
            footer: "<button id='cleardate' class='k-button' onclick='clearDate(PaymentDeductionObject_PatientStartDate)'>Clear</button>"
        }).attr("readonly","").data("kendoDatePicker");
        var patEndDate= $("#PaymentDeductionObject_PatientEndDate").kendoDatePicker({
            change: doChanges,
            footer: "<button id='cleardate' class='k-button' onclick='clearDate(PaymentDeductionObject_PatientEndDate)'>Clear</button>"
        }).attr("readonly","").data("kendoDatePicker");
        var compStartDate=  $("#PaymentDeductionObject_CompanionStartDate").kendoDatePicker({
            change: doChanges,
            footer: "<button id='cleardate' class='k-button' onclick='clearDate(PaymentDeductionObject_CompanionStartDate)'>Clear</button>"
        }).attr("readonly","").data("kendoDatePicker");
        var compEndDate=  $("#PaymentDeductionObject_CompanionEndDate").kendoDatePicker({
            change: doChanges,
            footer: "<button id='cleardate' class='k-button' onclick='clearDate(PaymentDeductionObject_CompanionEndDate)'>Clear</button>"
        }).attr("readonly","").data("kendoDatePicker");
        function clearDate(elementId) {

            setTimeout(function() {
                $(elementId).data("kendoDatePicker").value(null);
                debugger;
                setPayment();
                setDeduction();
                doChanges();
            });

        }
        function DaysDiff(startDate, endDate) {

            var diff = new Date(new Date(startDate) - new Date(endDate));
            diff = diff / (1000 * 60 * 60 * 24);
            if (diff < 0) {
                diff = diff * -1;
            }
            if(diff && diff>0)
                return Math.round(diff + 1);
            if(diff===0)
                return Math.round(diff + 1);
            return 0;
        }
        function deductionPeriod(paDays, coDays) {
            var period = 0;
            if (paDays)
                period = period + parseInt(paDays);
            if (coDays)
                period = period + parseInt(coDays);

            return period;
        }
        function displayProperColor(finalAmount) {


            if (finalAmount && parseInt(finalAmount) == 0) {
                $("#PaymentDeductionObject_FinalAmount").removeAttr("style");
            }
            if (finalAmount && finalAmount > 0) {
                $("#PaymentDeductionObject_FinalAmount").css({ "background-color": "#2cc34f", 'color': 'white' });
            }
            else {
                $("#PaymentDeductionObject_FinalAmount").css({ "background-color": "red", 'color': 'white' });
            }
        }
        function doChanges() {
            debugger;
            var patientdeductionStartDate = $("#PaymentDeductionObject_PatientStartDate").val();
            var patientdeductionEndDate = $("#PaymentDeductionObject_PatientEndDate").val();
            var companiondeductionStartDate = $("#PaymentDeductionObject_CompanionStartDate").val();
            var companiondeductionEndDate = $("#PaymentDeductionObject_CompanionEndDate").val();
            // new changes for patient deduction
            //var patientdays = DaysDiff(patientdeductionStartDate, patientdeductionEndDate);
            //var patientdays = DaysDiff(patientdeductionStartDate, patientdeductionEndDate);
            if(patientdeductionStartDate&&patientdeductionEndDate)
                $("#PatientDeudctionPeriod").val(DaysDiff(patientdeductionStartDate, patientdeductionEndDate));
            else $("#PatientDeudctionPeriod").val(0);
            if(companiondeductionStartDate&&companiondeductionEndDate)
                $("#CompanionDeudctionPeriod").val(DaysDiff(companiondeductionStartDate, companiondeductionEndDate));
            else $("#CompanionDeudctionPeriod").val(0);
            var patientdays = $("#PatientDeudctionPeriod").val();//DaysDiff(patientdeductionStartDate, patientdeductionEndDate);
            //var companiondays = DaysDiff(companiondeductionStartDate, companiondeductionEndDate);
            var companiondays = $("#CompanionDeudctionPeriod").val();//DaysDiff(companiondeductionStartDate, companiondeductionEndDate);

            finalAmount = 0;
            var patdaysDiff = 0;
            var compdaysDiff = 0;

            if (patientdays) {
                // new changes
                //patdaysDiff = lastPaymentsDiff - patientdays;
                patdaysDiff = patientdays;
            }
            if ( companiondays) {
                // new changes
                //compdaysDiff = lastPaymentsDiff - companiondays;
                compdaysDiff = companiondays;
            }
            setValues(patdaysDiff, compdaysDiff);

            //change the patient deduction end date min value
            patEndChange();
            //change the companion deduction end date min value
            compEndChange();
            //change the end date deduction min value
            patStartChange();
            //change the end date deduction min value
            compStartChange();
        }
        doChanges();


        $('#CompanionPayRate, #PatientPayRate, #PaymentStartDate, #PaymentEndDate, #CompanionDeductionRate, #PatientDeductionRate').change(function() {
            debugger;

            setPayment();
            // get the amount paid from total due
            setDeduction();
            //
            // new changes
            doChanges();
        });

        //$('#PaymentDeductionObject_PatientStartDate, ' +
        //    '#PaymentDeductionObject_PatientEndDate' +
        //    ',#PaymentDeductionObject_CompanionStartDate,' +
        //    '#PaymentDeductionObject_CompanionEndDate').change(function () {

        //        var patientdeductionStartDate = $("#PaymentDeductionObject_PatientStartDate").val();
        //        var patientdeductionEndDate = $("#PaymentDeductionObject_PatientEndDate").val();
        //        var companiondeductionStartDate = $("#PaymentDeductionObject_CompanionStartDate").val();
        //        var companiondeductionEndDate = $("#PaymentDeductionObject_CompanionEndDate").val();
        //        var patientdays = DaysDiff(patientdeductionStartDate, patientdeductionEndDate);
        //        var companiondays = DaysDiff(companiondeductionStartDate, companiondeductionEndDate);


        //        //we need to know the number of days that need to be deducted from the payment
        //        //
        //        //debugger;
        //        finalAmount = 0;
        //        var patdaysDiff = 0;
        //        var compdaysDiff = 0;
        //        // debugger;
        //        if (patientdays) {
        //            patdaysDiff = lastPaymentsDiff - patientdays;
        //        }
        //        if ( companiondays) {
        //            compdaysDiff = lastPaymentsDiff - companiondays;
        //        }
        //        setValues(patdaysDiff, compdaysDiff);

        //    });

        function setPayment() {
            debugger;
            var days = DaysDiff($("#PaymentStartDate").val(), $("#PaymentEndDate").val());
            if ($("#PaymentEndDate").val() && $("#PaymentStartDate").val() && days >= 0) {
                $("#PaymentLengthPeriod").val(days);
                var period = $("#PaymentLengthPeriod").val();
                var companionRate = $("#CompanionPayRate").val() * period;
                var patientRate = $("#PatientPayRate").val() * period;
                var companionAmount = 0;
                var patientAmount = 0;
                if (companionRate >= 0) {
                    $("#CompanionAmount").val(companionRate);
                    companionAmount = $("#CompanionAmount").val();
                }
                if (companionRate) {

                }
                $("#PatientAmount").val(patientRate);

                patientAmount = $("#PatientAmount").val();

                $("#TotalDue").val(parseInt(patientAmount) + parseInt(companionAmount));


            } else {
                $("#PaymentLengthPeriod").val("");
                $("#PatientAmount").val(0.00);
                $("#CompanionAmount").val(0.00);
                $("#TotalDue").val(0.00);
            }
        }
        function setDeduction() {
            debugger;
            var patientdeductionStartDate = $("#PaymentDeductionObject_PatientStartDate").val();
            var patientdeductionEndDate = $("#PaymentDeductionObject_PatientEndDate").val();
            var companiondeductionStartDate = $("#PaymentDeductionObject_CompanionStartDate").val();
            var companiondeductionEndDate = $("#PaymentDeductionObject_CompanionEndDate").val();
            var patientdays = DaysDiff(patientdeductionStartDate, patientdeductionEndDate);
            var companiondays = DaysDiff(companiondeductionStartDate, companiondeductionEndDate);
            $('#PaymentDeductionObject_AmountPaid').val($("#TotalDue").val());
            $("#PaymentDeductionObject_FinalAmount").val(
                $("#PaymentDeductionObject_AmountPaid").val() - $("#PaymentDeductionObject_TotalDeduction").val());
            finalAmount = $('#PaymentDeductionObject_FinalAmount').val();
            displayProperColor(finalAmount);

            var patdaysDiff = 0;
            var compdaysDiff = 0;
            //debugger;
            if (patientdays) {
                //patdaysDiff = lastPaymentsDiff - patientdays;
                patdaysDiff =  patientdays;

            }if (companiondays) {
                //compdaysDiff = lastPaymentsDiff - companiondays;
                compdaysDiff =  companiondays;
            }
            setValues(patdaysDiff, compdaysDiff);
        }
        function setValues(patientdaysDiff, companiondaysDiff) {
            debugger;
            if (patientdaysDiff > 0 || companiondaysDiff > 0) {// we shoud do deduction since the days
                doDeduction(patientdaysDiff, companiondaysDiff);
                $("#PaymentDeductionObject_DeductionPeriod").val(deductionPeriod(patientdaysDiff, companiondaysDiff));
                finalAmount = $('#PaymentDeductionObject_FinalAmount').val();
                displayProperColor(finalAmount);
            }
            if (patientdaysDiff < 0 || companiondaysDiff < 0) {
                doAddition(patientdaysDiff, companiondaysDiff);
                $("#PaymentDeductionObject_DeductionPeriod").val(deductionPeriod(patientdaysDiff, companiondaysDiff));
                finalAmount = $('#PaymentDeductionObject_FinalAmount').val();
                displayProperColor(finalAmount);
            }
            if ((!patientdaysDiff || patientdaysDiff == 0)) {
                $("#PaymentDeductionObject_PatientDeduction").val(0.00);
                // new changes
                $("#PaymentDeductionObject_DeductionPeriod").val(0);
            }
            if (companiondaysDiff == 0) {
                $("#PaymentDeductionObject_CompanionDeduction").val(0.00);
            }
            if ((patientdaysDiff == 0 || !patientdaysDiff)) {
                if (companiondaysDiff == 0 || !companiondaysDiff) {
                    $("#PaymentDeductionObject_FinalAmount").val($("#PaymentDeductionObject_AmountPaid").val()).removeAttr("style");
                    $("#PaymentDeductionObject_TotalDeduction").val(0.00);
                }
            }
            if (companiondaysDiff == 0 || !companiondaysDiff) {
                if (patientdaysDiff == 0 || !patientdaysDiff) {
                    $("#PaymentDeductionObject_FinalAmount").val($("#PaymentDeductionObject_AmountPaid").val()).removeAttr("style");
                    $("#PaymentDeductionObject_TotalDeduction").val(0.00);
                }
            }
        }
        function doDeduction(patientdays, companiondays) {
            debugger;
            //new change
            //var patientRate = patRate * patientdays;
            var patientRate = $("#PatientDeductionRate").val() * patientdays;
            // var companionRate = compRate * companiondays;
            var companionRate = $("#CompanionDeductionRate").val() * companiondays;
            console.log("patient deduction", patientRate);
            console.log("comapanion deduction", companionRate);

            if (patientRate)
                $("#PaymentDeductionObject_PatientDeduction").val(patientRate);
            else $("#PaymentDeductionObject_PatientDeduction").val("");
            if (companionRate)
                $("#PaymentDeductionObject_CompanionDeduction").val(companionRate);
            else $("#PaymentDeductionObject_CompanionDeduction").val("");
            companionDeduction = $("#PaymentDeductionObject_CompanionDeduction").val();
            patientDeduction = $("#PaymentDeductionObject_PatientDeduction").val();


            if (patientDeduction)
                total = parseInt(patientDeduction);
            if (companionDeduction)
                total = total + parseInt(companionDeduction);
            if (!patientDeduction && companionDeduction)
                total = parseInt(companionDeduction);

            $("#PaymentDeductionObject_TotalDeduction").val(total);
            $("#PaymentDeductionObject_FinalAmount").val(
                $("#PaymentDeductionObject_AmountPaid").val() - $("#PaymentDeductionObject_TotalDeduction").val());

        }
        function doAddition(patientdays, companiondays) {
            //var patientRate = patRate * patientdays * -1;
            //var companionRate = compRate * companiondays * -1;
            //new chages
            var patientRate = $("#PatientDeductionRate").val() * patientdays * -1;
            var companionRate = $("#CompanionDeductionRate").val() * companiondays * -1;

            if (patientRate)
                $("#PaymentDeductionObject_PatientDeduction").val(patientRate);
            else $("#PaymentDeductionObject_PatientDeduction").val("");
            if (companionRate)
                $("#PaymentDeductionObject_CompanionDeduction").val(companionRate);
            else $("#PaymentDeductionObject_CompanionDeduction").val("");
            companionDeduction = $("#PaymentDeductionObject_CompanionDeduction").val();
            patientDeduction = $("#PaymentDeductionObject_PatientDeduction").val();


            if (patientDeduction)
                total = parseInt(patientDeduction);
            if (companionDeduction)
                total = total + parseInt(companionDeduction);
            if (!patientDeduction && companionDeduction)
                total = parseInt(companionDeduction);

            $("#PaymentDeductionObject_TotalDeduction").val(total);
            $("#PaymentDeductionObject_FinalAmount").val(
                parseInt($("#PaymentDeductionObject_AmountPaid").val()) +
                parseInt($("#PaymentDeductionObject_TotalDeduction").val()));

        }

        function startChange() {
            //debugger;
            var startDate = start.value(),
                endDate = end.value();

            if (startDate) {
                startDate = new Date(startDate);
                startDate.setDate(startDate.getDate());
                end.min(startDate);
            } else if (endDate) {
                start.max(new Date(endDate));
            } else {
                endDate = new Date();
                start.max(endDate);
                end.min(endDate);
            }
        }

        function endChange() {
            // debugger;
            var endDate = end.value(),
                startDate = start.value();

            if (endDate) {
                endDate = new Date(endDate);
                endDate.setDate(endDate.getDate());
                start.max(endDate);
            } else if (startDate) {
                end.min(new Date(startDate));
            } else {
                endDate = new Date();
                start.max(endDate);
                end.min(endDate);
            }
        }
        function patEndChange() {
            var patDeducEndDate = patStartDate ? patStartDate.value():null;
            if (patDeducEndDate) {
                patDeducEndDate = new Date(patDeducEndDate);
                patDeducEndDate.setDate(patDeducEndDate.getDate());
                patEndDate.min(patDeducEndDate);
            }
        }
        function patStartChange() {
            var patDeducStartDate = patEndDate ? patEndDate.value():null;
            if (patDeducStartDate) {
                patDeducStartDate = new Date(patDeducStartDate);
                patDeducStartDate.setDate(patDeducStartDate.getDate());
                patStartDate.max(patDeducStartDate);
            }
        }
        function compEndChange() {
            // debugger;
            var compDeducEndDate = compStartDate ? compStartDate.value():null;
            if (compDeducEndDate) {
                compDeducEndDate = new Date(compDeducEndDate);
                compDeducEndDate.setDate(compDeducEndDate.getDate());
                compEndDate.min(compDeducEndDate);
            }
        }
        function compStartChange() {
            //  debugger;
            var compDeducStartDate = compEndDate ? compEndDate.value() : null;
            if (compDeducStartDate) {
                compDeducStartDate = new Date(compDeducStartDate);
                compDeducStartDate.setDate(compDeducStartDate.getDate());
                compStartDate.max(compDeducStartDate);
            }
        }
    </script>
    @*<script type="text/javascript">
            "use strict";
            var companionAmount = 0;
            var patientAmount = 0;
            var companionDeduction = 0;
            var patientDeduction = 0;
            var compRate = $("#Payment_CompanionPayRate").val();
            var patRate = $("#Payment_PatientPayRate").val();
            function DaysDiff(startDate, endDate) {
                var diff = new Date(new Date(startDate) - new Date(endDate));
                diff = diff / (1000 * 60 * 60 * 24);
                if (diff < 0) {
                    diff = diff * -1;
                }
                return  Math.round(diff + 1);
            }
            $('#Payment_CompanionPayRate, #Payment_PatientPayRate, #Payment_PaymentStartDate, #Payment_PaymentEndDate').change(function () {
                var payStartDate = $("#Payment_PaymentStartDate").val();
                var payEndDate = $("#Payment_PaymentEndDate").val();
                var days= DaysDiff(payStartDate,payEndDate);
                if (payStartDate && payEndDate && days >= 0) {
                    $("#Payment_PaymentLengthPeriod").val(days);
                    var companionRate = compRate * days;
                    var patientRate = patRate * days;
                    if (companionRate >= 0) {
                        $("#Payment_CompanionAmount").val(companionRate);
                        companionAmount =  $("#Payment_CompanionAmount").val();
                    }
                    $("#Payment_PatientAmount").val(patientRate);
                    patientAmount =  $("#Payment_PatientAmount").val();
                    debugger;
                    $("#Payment_TotalDue").val(parseInt(patientAmount) + parseInt(companionAmount));
                } else {
                    $("#Payment_PaymentLengthPeriod").val("");
                    $("#Payment_PatientAmount").val(0.00);
                    $("#Payment_CompanionAmount").val(0.00);
                    $("#Payment_TotalDue").val(0.00);
                }

            });

            $('#PaymentDeduction_PatientStartDate, #PaymentDeduction_PatientEndDate').change(function () {

                var deductionStartDate = $("#PaymentDeduction_PatientStartDate").val();
                var deductionEndDate = $("#PaymentDeduction_PatientEndDate").val();

                var days= DaysDiff(deductionStartDate,deductionEndDate);
                if (deductionEndDate && deductionStartDate && days > 0) {

                    var patientRate = patRate * days;

                    $("#PaymentDeduction_PatientDeduction").val(patientRate);
                    patientDeduction =  $("#PaymentDeduction_PatientDeduction").val();
                    companionDeduction =  $("#PaymentDeduction_CompanionDeduction").val();
                    var total = 0
                    if(companionDeduction  && companionDeduction>0)
                        total = parseInt(patientDeduction) + parseInt(companionDeduction);
                    else total = parseInt(patientDeduction);
                    $("#PaymentDeduction_TotalDeduction").val(total);
                    $("#PaymentDeduction_FinalAmount").val(
                        $("#PaymentDeduction_AmountPaid").val()-$("#PaymentDeduction_TotalDeduction").val());


                    var finalAmount = $('#PaymentDeduction_FinalAmount').val();

                    if(finalAmount && finalAmount==0){
                        $("#PaymentDeduction_FinalAmount").removeAttr( "style" );
                    }
                    if (finalAmount && finalAmount>0){
                        $("#PaymentDeduction_FinalAmount").css( {"background-color": "#2cc34f",'color':'white'} );
                    }
                    else{
                        $("#PaymentDeduction_FinalAmount").css( {"background-color": "red",'color':'white'} );
                    }
                } else {
                    $("#PaymentDeduction_FinalAmount").val("").removeAttr( "style" );

                    $("#PaymentDeduction_PatientDeduction").val(0.00);
                    $("#PaymentDeduction_TotalDeduction").val(0.00);
                }

            });
            $('#PaymentDeduction_CompanionStartDate, #PaymentDeduction_CompanionEndDate').change(function () {

                var deductionStartDate = $("#PaymentDeduction_CompanionStartDate").val();
                var deductionEndDate = $("#PaymentDeduction_CompanionEndDate").val();

                var days= DaysDiff(deductionStartDate,deductionEndDate);
                if (deductionEndDate && deductionStartDate && days > 0) {

                     var companionRate = compRate * days;


                     $("#PaymentDeduction_CompanionDeduction").val(companionRate);
                     companionDeduction =  $("#PaymentDeduction_CompanionDeduction").val();
                     patientDeduction =  $("#PaymentDeduction_PatientDeduction").val();
                     var total = 0
                     if(patientDeduction && patientDeduction>0)
                         total = parseInt(patientDeduction) + parseInt(companionDeduction);
                     else total = parseInt(companionDeduction);

                     $("#PaymentDeduction_TotalDeduction").val(total);
                     $("#PaymentDeduction_FinalAmount").val(
                         $("#PaymentDeduction_AmountPaid").val()-$("#PaymentDeduction_TotalDeduction").val());


                     var finalAmount = $('#PaymentDeduction_FinalAmount').val();

                     if(finalAmount && finalAmount==0){
                         $("#PaymentDeduction_FinalAmount").removeAttr( "style" );
                     }
                     if (finalAmount && finalAmount>0){
                         $("#PaymentDeduction_FinalAmount").css( {"background-color": "#2cc34f",'color':'white'} );
                     }
                     else{
                         $("#PaymentDeduction_FinalAmount").css( {"background-color": "red",'color':'white'} );
                     }
                } else {

                    $("#PaymentDeduction_FinalAmount").val("").removeAttr( "style" );
                    $("#PaymentDeduction_CompanionDeduction").val(0.00);
                    $("#PaymentDeduction_TotalDeduction").val(0.00);

                }

            });

        </script>*@
}
