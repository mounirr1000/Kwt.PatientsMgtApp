@using Kwt.PatientsMgtApp.WebUI.Infrastructure
@model Kwt.PatientsMgtApp.Core.Models.PatientModel

@{
    ViewBag.Title = "Edit Patient";
}


@using (Html.BeginForm("Edit", "Patient", FormMethod.Post, new { @class = "k-form", id = "PatientEdit" }))
{

    <div class="mt-3 row">
        <div class="pr-4 mb-4">
            <a href="@Url.Action("Details", new {patientCid = Model.PatientCID})" class="k-button"><i class="fa fa-ban" style="color: lightblue"></i> Cancel</a>
        </div>
        <div class="mb-4">
            <button type="submit" class="k-button"><i class="fa fa-check" style="color: greenyellow"></i> Update</button>
        </div>
        @if (User.IsInAnyRoles(CrudRoles.AdminCrudRoles))
        {
            @* Uncomment the next lines once the invoice is complete *@
            <div class="col-md-12 row pb-3">
                @if (Model.IsBlocked == true)
                {
                    <div style="width: 100%">
                        <p class="aler alert-dark p-4" style="width: 100%">This Patient Is Blocked <i class="fa fa-ban"></i>, So he/she can't be paid. To Unblock him/her click '<i class="fa fa-unlock-alt"></i> Unblock This Patient' below  </p>
                    </div>
                    <div>
                        <button id="unBlockPatient" type="submit" class="k-button" style="width: 100%"><i class="fa fa-unlock-alt" style="color: lightcoral"></i> Unblock This Patient</button>
                    </div>
                }
                else
                {
                    <div style="width: 100%">
                        <p class="aler alert-dark p-4" style="width: 100%">This Patient Is Not Blocked, To block him/her click '<i class="fa fa-lock"></i> Block This Patient' below </p>
                    </div>
                    <div>
                        <button id="blockPatient" type="submit" class="k-button" style="width: 100%"><i class="fa fa-lock" style="color: lightcoral"></i> Block This Patient</button>
                    </div>

                }
            </div>
        }



    </div>



    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(false, "", new { @class = "k-error-colored" })
        @Html.HiddenFor(model => model.PatientCID)
        @Html.HiddenFor(model => model.Id)
        <div id="patientEdit" style="visibility:hidden;">
            <button data-toggle="collapse" data-target="#patientDetail"><i></i> Patient Details</button>
            <fieldset id="patientDetail" class="collapse show">
                <legend></legend>
                <ul class="fieldlist row">
                    <li class="col-md-4">
                        @Html.LabelFor(model => model.PatientFName, new { @class = "" })
                        @Html.TextBoxFor(model => model.PatientFName, new { @class = "k-textbox", style = "width: 100%;" })
                        @Html.ValidationMessageFor(model => model.PatientFName, "", new { @class = "k-error-colored" })
                    </li>
                    <li class="col-md-4">
                        @Html.LabelFor(model => model.PatientMName, new { @class = "" })
                        @Html.TextBoxFor(model => model.PatientMName, new { @class = "k-textbox", style = "width: 100%;" })
                        @Html.ValidationMessageFor(model => model.PatientMName, "", new { @class = "k-error-colored" })
                    </li>
                    <li class="col-md-4">
                        @Html.LabelFor(model => model.PatientLName, new { @class = "" })
                        @Html.TextBoxFor(model => model.PatientLName, new { @class = "k-textbox", style = "width: 100%;" })
                        @Html.ValidationMessageFor(model => model.PatientLName, "", new { @class = "k-error-colored" })
                    </li>
                    @* english name *@
                    <li class="col-md-4">

                        @Html.LabelFor(model => model.EnglishPatFName, new { @class = "" })
                        @Html.TextBoxFor(model => model.EnglishPatFName, new { @class = "k-textbox", style = "width: 100%;" })
                        <div>
                            @Html.ValidationMessageFor(model => model.EnglishPatFName, "", new { @class = "k-error-colored" })
                        </div>
                    </li>
                    <li class="col-md-4">

                        @Html.LabelFor(model => model.EnglishPatMName, new { @class = "" })
                        @Html.TextBoxFor(model => model.EnglishPatMName, new { @class = "k-textbox", style = "width: 100%;" })
                        <div>
                            @Html.ValidationMessageFor(model => model.EnglishPatMName, "", new { @class = "k-error-colored" })
                        </div>
                    </li>
                    <li class="col-md-4">
                        @Html.LabelFor(model => model.EnglishPatLName, new { @class = "" })
                        @Html.TextBoxFor(model => model.EnglishPatLName, new { @class = "k-textbox", style = "width: 100%;" })
                        <div>
                            @Html.ValidationMessageFor(model => model.EnglishPatLName, "", new { @class = "k-error-colored" })
                        </div>
                    </li>
                    @*  *@
                    <li class="col-md-4">
                        @Html.LabelFor(model => model.KWTPhone, new { @class = "" })
                        @Html.TextBoxFor(model => model.KWTPhone, new { @class = "k-textbox", style = "width: 100%;" })
                        @Html.ValidationMessageFor(model => model.KWTPhone, "", new { @class = "k-error-colored" })
                    </li>
                    <li class="col-md-4">
                        @Html.LabelFor(model => model.USPhone, htmlAttributes: new { @class = "" })
                        @Html.TextBoxFor(model => model.USPhone, new { @class = "k-textbox", style = "width: 100%;" })
                        @Html.ValidationMessageFor(model => model.USPhone, "", new { @class = "k-error-colored" })
                    </li>
                    @if (!User.IsInRole("Medical"))
                    {
                        <li class="col-md-4">
                            @Html.LabelFor(model => model.Agency, new { @class = "" })
                            @Html.DropDownListFor(model => model.Agency, new List<SelectListItem>(Model.Agencies.Select(a => new SelectListItem()
                       {
                           Text = a.AgencyName,
                           Value = a.AgencyName
                       }).ToList()), "", new { style = "width:50%" })
                            @Html.ValidationMessageFor(model => model.Agency, "", new { @class = "k-error-colored" })
                        </li>
                    }
                    else
                    {
                        <li class="col-md-4">
                            @Html.LabelFor(model => model.Agency, htmlAttributes: new { @class = "" })
                            @Html.TextBoxFor(model => model.Agency, new { @class = "k-textbox", style = "width: 50%;" })
                        </li>
                    }

                </ul>
            </fieldset>
            <button data-toggle="collapse" data-target="#dignosisDetails"><i></i> Dignosis Details</button>
            <fieldset id="dignosisDetails" class="collapse">
                <legend></legend>
                <ul class="fieldlist row">
                    @if (!User.IsInRole("Medical"))
                    {
                        <li class="col-md-6">
                            @Html.LabelFor(model => model.Hospital, new { @class = "" })
                            @Html.DropDownListFor(model => model.Hospital, new List<SelectListItem>(Model.Hospitals.Select(a => new SelectListItem()
                       {
                           Text = a.HospitalName,
                           Value = a.HospitalName
                       }).ToList()), "", new { style = "width:90%" })
                            @Html.ValidationMessageFor(model => model.Hospital, "", new { @class = "k-error-colored" })
                        </li>
                        <li class="col-md-6">
                            @Html.LabelFor(model => model.Specialty, new { @class = "" })
                            @Html.DropDownListFor(model => model.Specialty, new List<SelectListItem>(Model.Sepcialities.Select(a => new SelectListItem()
                       {
                           Text = a.Speciality,
                           Value = a.Speciality
                       }).ToList()), "", new { style = "width:50%" })
                            @Html.ValidationMessageFor(model => model.Specialty, "", new { @class = "k-error-colored" })
                        </li>
                        <li class="col-md-6">
                            @Html.LabelFor(model => model.Doctor, new { @class = "" })
                            @Html.DropDownListFor(model => model.Doctor, new List<SelectListItem>(Model.Doctors.Select(a => new SelectListItem()
                       {
                           Text = a.DoctorName,
                           Value = a.DoctorName
                       }).ToList()), "", new { style = "width:50%" })
                            @Html.ValidationMessageFor(model => model.Doctor, "", new { @class = "k-error-colored" })
                        </li>
                    }
                    else
                    {
                        <li class="col-md-6">
                            @Html.LabelFor(model => model.Hospital, new { @class = "" })
                            @Html.TextBoxFor(model => model.Hospital, new { @class = "k-textbox", style = "width: 90%;" })
                        </li>
                        <li class="col-md-6">
                            @Html.LabelFor(model => model.Specialty, new { @class = "" })
                            @Html.DropDownListFor(model => model.Specialty, new List<SelectListItem>(Model.Sepcialities.Select(a => new SelectListItem()
                       {
                           Text = a.Speciality,
                           Value = a.Speciality
                       }).ToList()), "", new { style = "width:50%" })
                            @Html.ValidationMessageFor(model => model.Specialty, "", new { @class = "k-error-colored" })
                        </li>
                        <li class="col-md-6">
                            @Html.LabelFor(model => model.Doctor, new { @class = "" })
                            @Html.TextBoxFor(model => model.Doctor, new { @class = "k-textbox", style = "width: 50%;" })
                        </li>
                    }

                    <li class="col-md-6">
                        @Html.LabelFor(model => model.Diagnosis, new { @class = "" })
                        @Html.TextAreaFor(model => model.Diagnosis, new { @class = "k-editor-textarea", style = "width: 100%;", maxlength = "250" })
                        @*@Html.ValidationMessageFor(model => model.Diagnosis, "", new { @class = "text-danger" })*@
                    </li>
                </ul>
            </fieldset>
            <button data-toggle="collapse" data-target="#bankDetails"><i> </i> Bank Details</button>
            <fieldset id="bankDetails" class="collapse">
                <legend></legend>
                <ul class="fieldlist row">
                    @if (!User.IsInRole("Medical"))
                    {
                        <li class="col-md-2">
                            @Html.LabelFor(model => model.IsBeneficiary, new { @class = "k-checkbox-label" })
                            @Html.EditorFor(model => model.IsBeneficiary, new { @class = "k-checkbox" })
                            @Html.ValidationMessageFor(model => model.IsBeneficiary, "", new { @class = "k-error-colored" })
                        </li>
                    }
                    else
                    {
                        <li class="col-md-2">
                            @Html.LabelFor(model => model.IsBeneficiary, new { @class = "k-checkbox-label" })
                            @Html.TextBoxFor(model => model.IsBeneficiary, new { @class = "k-checkbox" })
                        </li>
                    }

                </ul>
                <ul class="fieldlist row">
                    @if (!User.IsInRole("Medical"))
                    {
                        <li class="col-md-6 pt-2">
                            @Html.LabelFor(model => model.BankName, new { @class = "" })
                            @Html.DropDownListFor(model => model.BankName, new List<SelectListItem>(Model.Banks.Select(a => new SelectListItem()
                       {
                           Text = a.BankName,
                           Value = a.BankName
                       }).ToList()), "", new { style = "width:60%" })
                            @Html.ValidationMessageFor(model => model.BankName, "", new { @class = "k-error-colored" })
                        </li>
                    }
                    else
                    {
                        <li class="col-md-6 pt-2">
                            @Html.LabelFor(model => model.BankName, new { @class = "" })
                            @Html.TextBoxFor(model => model.BankName, new { @class = "k-textbox", style = "width: 60%;" })
                        </li>
                    }

                    <li class="col-md-6 pt-2">
                        @Html.LabelFor(model => model.Iban, new { @class = "" })
                        @Html.TextBoxFor(model => model.Iban, new { @class = "k-textbox", style = "width:100%", maxlength = "30" })
                        @Html.ValidationMessageFor(model => model.Iban, "", new { @class = "k-error-colored" })
                    </li>
                </ul>
            </fieldset>
            <button data-toggle="collapse" data-target="#treatmentDetails"><i> </i> Treatment Details</button>
            <fieldset id="treatmentDetails" class="collapse">
                <legend></legend>
                <ul class="fieldlist row">
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.FirstApptDAte, new { @class = "" })
                        @Html.TextBoxFor(model => model.FirstApptDAte, "{0:MM/dd/yyyy}", new { @class = "", style = "width: 60%" })
                        @Html.ValidationMessageFor(model => model.FirstApptDAte, "", new { @class = "k-error-colored" })
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.EndTreatDate, new { @class = "" })
                        @Html.TextBoxFor(model => model.EndTreatDate, "{0:MM/dd/yyyy}", new { @class = "", style = "width: 60%" })
                        @Html.ValidationMessageFor(model => model.EndTreatDate, "", new { @class = "k-error-colored" })
                    </li>
                    <li class="col-md-3">
                        @Html.LabelFor(model => model.AuthorizedDate, new { @class = "" })
                        @Html.TextBoxFor(model => model.AuthorizedDate, "{0:MM/dd/yyyy}", new { @class = "", style = "width: 60%" })
                        <div>
                            @Html.ValidationMessageFor(model => model.AuthorizedDate, "", new { @class = "k-error-colored" })
                        </div>
                    </li>
                    @if (!User.IsInRole("Medical"))
                    {
                        <li class="col-md-2">
                            @Html.LabelFor(model => model.IsActive, new { @class = "" })
                            @Html.EditorFor(model => model.IsActive, new { @class = "form-control", style = "width: 100%" })
                            @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "k-error-colored" })
                        </li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.IsDead, new { @class = "" })
                            @Html.EditorFor(model => model.IsDead, new { @class = "form-control", style = "width: 100%" })
                        </li>
                        <li class="col-md-3 hidden" id="taggleDeathDate">
                            @Html.LabelFor(model => model.DeathDate, new { @class = "" })
                            @Html.TextBoxFor(model => model.DeathDate, "{0:MM/dd/yyyy}", new { @class = "", style = "width: 60%;" })
                            <div>
                                @Html.ValidationMessageFor(model => model.DeathDate, "", new { @class = "k-error-colored" })
                            </div>
                        </li>
                    }
                    else
                    {
                        <li class="col-md-2">
                            @Html.LabelFor(model => model.IsActive, new { @class = "" })
                            @Html.EditorFor(model => model.IsActive, new { @class = "form-control", style = "width: 100%" })
                        </li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.IsDead, new { @class = "" })
                            @Html.EditorFor(model => model.IsDead, new { @class = "form-control", style = "width: 100%" })
                        </li>
                        <li class="col-md-3">
                            @Html.LabelFor(model => model.DeathDate, new { @class = "" })
                            @Html.TextBoxFor(model => model.DeathDate, "{0:MM/dd/yyyy}", new { @class = "", style = "width: 60%" })
                            <div>
                                @Html.ValidationMessageFor(model => model.DeathDate, "", new { @class = "k-error-colored" })
                            </div>
                        </li>
                    }

                    <li class="col-md-4">
                        @Html.LabelFor(model => model.Notes, new { @class = "" })
                        @Html.TextAreaFor(model => model.Notes, new { @class = "k-editor-textarea", maxlength = "250", style = "width: 100%" })
                        @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "k-error-colored" })
                    </li>


                </ul>
            </fieldset>
        </div>
        <div class="mt-3">
            <p>
                <a href="@Url.Action("Details", new {patientCid = Model.PatientCID})" class="k-button"><i class="fa fa-ban" style="color: lightblue"></i> Cancel</a>
                <button type="submit" class="k-button"><i class="fa fa-check" style="color: greenyellow"></i> Update</button>
            </p>
        </div>

    </div>
}



@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        //$('.datepicker').datepicker({
        //    dateFormat: "m/d/yy"
        //});

        $("form").submit(function(event) {
            $(".k-widget").removeClass("input-validation-error");
        });
        $(document).ready(function () {

            var isMedical =   @Html.Raw(Json.Encode(User.IsInRole("Medical")));
            var patient = @Html.Raw(Json.Encode(Model));
            console.log(patient);
            if (!isMedical) {
                var datePicker =  $("#EndTreatDate, #FirstApptDAte, #AuthorizedDate, #DeathDate").kendoDatePicker();
                var dropDownlist =  $("#BankName, #Hospital, #Agency, #Specialty, #Doctor").kendoDropDownList();
            }

            $("#KWTPhone").kendoMaskedTextBox({
                mask: "0000000000"
            });
            $("#USPhone").kendoMaskedTextBox({
                mask: "0000000000"
            });
            $("#Iban").kendoMaskedTextBox({
                mask: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                promptChar: ""
                //
            });
            $("#patientEdit").css("visibility", "visible");

            $('#patientEdit button').addClass('btn btn-block mb-2 text-uppercase text-white bg-info');
            //fa fa-angle-double-down pull-left
            $('#patientEdit button i').addClass('fa fa-angle-double-down pull-left');


            $('#patientEdit button').click(function (e) {
                e.preventDefault();
                var $this = this;
                var caret = $($this).find('i');
                if ($(caret).hasClass('fa-angle-double-down'))
                    $(caret).removeClass('fa-angle-double-down').addClass("fa-angle-double-up");
                else
                    $(caret).removeClass('fa-angle-double-up').addClass("fa-angle-double-down");

            });

            $('#unBlockPatient').click(function (e) {
                //e.preventDefault();
                //Model.IsBlocked = false;
                $('#PatientEdit').append('<input type="hidden" name="IsBlocked" value="false" />');

            });
            $('#blockPatient').click(function (e) {
                //e.preventDefault();
                //Model.IsBlocked = true;
                $('#PatientEdit').append('<input type="hidden" name="IsBlocked" value="true" />');

            });
            //new

            if (isMedical && isMedical==true) {
                var formElem = $('#PatientEdit input[type="text"], #Notes');
                var kendoDropDown = $("#BankName, #Hospital, #Agency, #Doctor");
                var kendodatepicker = $("#FirstApptDAte, #AuthorizedDate");
                var endTreatment = $("#EndTreatDate");
                var specialty = $("#Specialty");
                $("#dignosisDetails, #treatmentDetails").removeClass( "collapse" ).addClass( "collapse show" );
                //formElem.prop("disabled", true);
                $("#EndTreatDate").kendoDatePicker({
                    enable: true
                });
                formElem.addClass( "edit" );
                formElem.attr("readonly", "readonly");
                kendodatepicker.addClass( "edit" );
                kendoDropDown.addClass( "edit" );
                //$("select").prop("disabled", "disabled"); readonly="readonly"
                $('#PatientEdit #Notes').addClass("edit");
                $('#PatientEdit #Diagnosis').css("border", "2px solid lightgreen").focus();
                //$("#PatientEdit button").attr("disabled", false);
                // kendoDropDown.kendoTextbox();
                kendodatepicker.kendoDatePicker({
                    enable: false
                });

                endTreatment.removeClass("edit");
                endTreatment.attr("readonly", false);
                //endTreatment.css("border", "2px solid lightgreen");
                specialty.kendoDropDownList();
                //specialty.css("border", "2px solid lightgreen");
            }


            // is dead ipmplementation
            console.log($('#IsDead').val());
            //if ($('#IsDead').val() && $('#IsDead').val() === 'true')
            if ($('#IsDead').is(":checked"))
                $('#taggleDeathDate').addClass('visible').removeClass("hidden");
            else {
                $('#taggleDeathDate').addClass('hidden').removeClass("visible");
            }
            $('#IsDead').change(function() {

                var isdead = $('#IsDead').val();
                console.log(isdead);
                //if (isdead && isdead === 'true') 
                if ($('#IsDead').is(":checked"))
                {
                    $('#taggleDeathDate').removeClass("hidden").addClass("visible");
                    //alert(isdead);
                } else {
                    $('#DeathDate').val(null);
                    $('#taggleDeathDate').removeClass("visible").addClass("hidden");
                }

            });
            //
            $(".loader").css("display", "none");
        });
    </script>

}
